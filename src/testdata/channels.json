{
  "nodes": [
    {
      "file": "module.md",
      "nodes": [
        {
          "atom": "html",
          "file": "module.md",
          "nodes": [
            {
              "atom": "head",
              "file": "module.md",
              "type": "*hype.Element"
            },
            [
              {
                "atom": "body",
                "file": "module.md",
                "nodes": [
                  [
                    {
                      "atom": "page",
                      "file": "module.md",
                      "nodes": [
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h1",
                            "file": "module.md",
                            "level": 1,
                            "nodes": [
                              {
                                "text": "Channels",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In this ",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "binding",
                                "attributes": {
                                  "part": ""
                                },
                                "file": "module.md",
                                "type": "*hype.Element"
                              },
                              {
                                "text": " we will start exploring concurrency in Go. We will start by discussing the difference between concurrency and parallelism. We learn about goroutines, what they are and how they behave. Finally, we will learn about channels and how they can be used to communicate between go routines as well as control them.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Channels - Some Wisdom",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Before we get too far into concurrency and channels, there are some quotes about them that may help guide you in their usage:",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-1",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "blockquote",
                                "nodes": [
                                  {
                                    "text": "\nI can’t tell you how many times I start with channels, and by the time I’m done, I’ve completely optimized them out. -- Cory LaNou\nWhen I first learned about channels, I wanted use them everywhere. Now, I rarely use them at all. -- Mat Ryer\n",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.1:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Quotes about Channels.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 1,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "The quotes in, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-1"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-1"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.1",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-1"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", are not intended to steer you away from using channels, but more to think about do you in fact need a channel? It is common for developers new to Go to overuse channels, which leads to unnecessary code complexity with no benefit to program performance.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "title": "Channels",
                      "type": "*hype.Page"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "include",
                      "attributes": {
                        "src": "parallelism.md"
                      },
                      "dir": ".",
                      "file": "module.md",
                      "nodes": [
                        [
                          {
                            "atom": "page",
                            "file": "parallelism.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h1",
                                  "file": "parallelism.md",
                                  "level": 1,
                                  "nodes": [
                                    {
                                      "text": "Concurrency and Parallelism",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "blockquote",
                                "file": "parallelism.md",
                                "nodes": [
                                  {
                                    "text": "\n",
                                    "type": "hype.Text"
                                  },
                                  [
                                    {
                                      "atom": "p",
                                      "file": "parallelism.md",
                                      "nodes": [
                                        {
                                          "text": "\"According to ",
                                          "type": "hype.Text"
                                        },
                                        [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "https://en.wikipedia.org/wiki/Rob_Pike",
                                              "target": "_blank"
                                            },
                                            "file": "parallelism.md",
                                            "nodes": [
                                              {
                                                "text": "Rob Pike",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "https://en.wikipedia.org/wiki/Rob_Pike"
                                          }
                                        ],
                                        {
                                          "text": ", ",
                                          "type": "hype.Text"
                                        },
                                        [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "https://bit.ly/3GwX4V6",
                                              "target": "_blank"
                                            },
                                            "file": "parallelism.md",
                                            "nodes": [
                                              {
                                                "text": "concurrency",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "https://bit.ly/3GwX4V6"
                                          }
                                        ],
                                        {
                                          "text": " is the composition of independently executing computations, and concurrency is not parallelism: concurrency is about dealing with lots of things at once but parallelism is about doing lots of things at once. Concurrency is about structure, parallelism is about execution, concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.\"",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Paragraph"
                                    }
                                  ],
                                  {
                                    "text": "\n",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "parallelism.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Concurrency is not Parallelism",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "Concurrency is not parallelism, although it enables parallelism.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ul",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "li",
                                        "file": "parallelism.md",
                                        "list-type": "ul",
                                        "nodes": [
                                          {
                                            "text": "Concurrency is about dealing with a lot of things at once.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.LI"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "li",
                                        "file": "parallelism.md",
                                        "list-type": "ul",
                                        "nodes": [
                                          {
                                            "text": "Parallelism is about doing a lot of things at once.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.LI"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.UL"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "em",
                                "file": "parallelism.md",
                                "nodes": [
                                  {
                                    "text": "If you have only one processor, your program can still be concurrent but it cannot be parallel.",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "If you have a single resource, and multiple tasks, you can share your time across those tasks, thus work on all tasks concurrently. However, to work on all tasks in parallel, you need need more than one resource.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "parallelism.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Understanding Concurrency",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "Consider the task of feeding a dog, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-2"
                                        },
                                        "file": "parallelism.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-2"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.2",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-2"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The dog is hungry, needs to be fed, and the treats are in a box. To feed the dog, you need to open the box, take a treat out of the box, carry the treat in your hand, and then feed the dog the treat.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-2",
                                    "type": "listing"
                                  },
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "img",
                                        "attributes": {
                                          "src": "assets/dog/the-problem.png",
                                          "width": "100%"
                                        },
                                        "file": ".",
                                        "type": "*hype.Image"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.2:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Feeding one dog, one treat, with one hand.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 2,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h3",
                                  "file": "parallelism.md",
                                  "level": 3,
                                  "nodes": [
                                    {
                                      "text": "Adding Dogs",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-3"
                                        },
                                        "file": "parallelism.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-3"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.3",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-3"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " a second dog also needs to be fed a treat. However, there is a resource constraint of just one hand. With one hand, you can only carry one treat at a time, and thus feed only one dog at a time.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-3",
                                    "type": "listing"
                                  },
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "img",
                                        "attributes": {
                                          "src": "assets/dog/two-dogs.png",
                                          "width": "100%"
                                        },
                                        "file": ".",
                                        "type": "*hype.Image"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.3:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Feeding two dogs, one treat, with one hand.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 3,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "To feed both dogs, you have to feed a treat to one dog, then take another treat from the box in your hand, and then feed a treat to the other dog. It's important to note now that because you can only feed one dog at a time, the other dog is waiting.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "This is a ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "strong",
                                      "file": "parallelism.md",
                                      "nodes": [
                                        {
                                          "text": "concurrent",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " operation.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "It is important to note that concurrency takes advantage of tasks in a \"waiting\" state. Instead of waiting for the first dog to finish the treat before going to the second dog and feeding it a treat, we immediately started the second dog on the task of eating a treat while the first dog was busy.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h3",
                                  "file": "parallelism.md",
                                  "level": 3,
                                  "nodes": [
                                    {
                                      "text": "More Hands",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "The one hand resource constraint can be lifted by using your other hand, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-4"
                                        },
                                        "file": "parallelism.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-4"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.4",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-4"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". With two hands, you can carry two treats at a time, and thus feed two dogs at a time. However, only one hand at a time can be placed into the box to retrieve a treat. This is a ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "strong",
                                      "file": "parallelism.md",
                                      "nodes": [
                                        {
                                          "text": "serial",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " operation and requires the scheduling of one had at a time to retrieve a treat.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-4",
                                    "type": "listing"
                                  },
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "img",
                                        "attributes": {
                                          "src": "assets/dog/two-dogs-two-hands.png",
                                          "width": "100%"
                                        },
                                        "file": ".",
                                        "type": "*hype.Image"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.4:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Feeding two dogs, two treats, with two hands.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 4,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "Feeding the dogs is a ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "strong",
                                      "file": "parallelism.md",
                                      "nodes": [
                                        {
                                          "text": "concurrent",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": ", not ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "strong",
                                      "file": "parallelism.md",
                                      "nodes": [
                                        {
                                          "text": "parallel",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " operation. Even though there are enough hands to feed both dogs, only one hand can retrieve a treat at a time.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h3",
                                  "file": "parallelism.md",
                                  "level": 3,
                                  "nodes": [
                                    {
                                      "text": "More Scenarios",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "If more treat boxes and dogs are added, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-5"
                                        },
                                        "file": "parallelism.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-5"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.5",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-5"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", there are still only two hands. While this may allow for a faster concurrent operation (less waiting to get the treats as there is less contention with scheduling), there is always at least one dog waiting for a treat. This is one of many common design challenges that software engineers need to solve for when creating concurrent solutions",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-5",
                                    "type": "listing"
                                  },
                                  "file": "parallelism.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "img",
                                        "attributes": {
                                          "src": "assets/dog/advanced.png",
                                          "width": "100%"
                                        },
                                        "file": ".",
                                        "type": "*hype.Image"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.5:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Feeding multiple dogs, from multiple boxes, with two hands.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 5,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "title": "Concurrency and Parallelism",
                            "type": "*hype.Page"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "type": "*hype.Include"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "include",
                      "attributes": {
                        "src": "concurrency.md"
                      },
                      "dir": ".",
                      "file": "module.md",
                      "nodes": [
                        [
                          {
                            "atom": "page",
                            "file": "concurrency.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h1",
                                  "file": "concurrency.md",
                                  "level": 1,
                                  "nodes": [
                                    {
                                      "text": "Go's Concurrency Model",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "In a lot of languages concurrency is achieved through the use of creating heavy weight ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "href": "https://bit.ly/3Cu5NVB",
                                          "target": "_blank"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "text": "system processes",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://bit.ly/3Cu5NVB"
                                      }
                                    ],
                                    {
                                      "text": ", kernel threads, third party libraries, or other means. There are mechanics for joining threads, managing threads, implementing thread interfaces and more.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "In Go, concurrency is built directly into the language without the need for third party libraries, system processes, or kernel threads.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "concurrency.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Goroutines",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Go uses the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "href": "https://en.wikipedia.org/wiki/Coroutine",
                                          "target": "_blank"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "text": "coroutine",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://en.wikipedia.org/wiki/Coroutine"
                                      }
                                    ],
                                    {
                                      "text": " model to achieve concurrency. In Go we call these coroutine functions, \"goroutines\".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Simply put, a goroutine is an independent function, launched by a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "text": "go",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement, capable of being run concurrently with other goroutines. See ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-6"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-6"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.6",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-6"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " for examples of creating goroutines.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-6",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "file": ".",
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "go someFunction()\n\ngo func() {\n  // do something\n}()\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.6:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Examples of launching goroutines.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 6,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "A goroutine is ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "em",
                                      "file": "concurrency.md",
                                      "nodes": [
                                        {
                                          "text": "NOT",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " a system thread or process. It is a lightweight thread of execution that is managed by the Go runtime scheduler.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "em",
                                "file": "concurrency.md",
                                "nodes": [
                                  {
                                    "text": "…But if it helps you to think of a goroutine as a very cheap thread, you won't be far off…",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "concurrency.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Goroutine Memory",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Goroutines have their own memory call stack which will start with a small amount of memory and will grow as needed. The amount of memory each goroutine starts with can change with releases based on changes to the Go runtime, garbage collector, and language.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "blockquote",
                                "file": "concurrency.md",
                                "nodes": [
                                  {
                                    "text": "\n",
                                    "type": "hype.Text"
                                  },
                                  [
                                    {
                                      "atom": "p",
                                      "file": "concurrency.md",
                                      "nodes": [
                                        {
                                          "text": "Go does not allow developers to control the amount of memory allocated to a goroutine.",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Paragraph"
                                    }
                                  ],
                                  {
                                    "text": "\n",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Because goroutines are cheap and easy to use, it is not uncommon to have hundreds, thousands, or even millions of goroutines running at once.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "concurrency.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "The Go Scheduler",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "The scheduler in Go is responsible for distributing the runnable goroutines over multiple OS threads that run on one or more processors.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "blockquote",
                                "file": "concurrency.md",
                                "nodes": [
                                  {
                                    "text": "\n",
                                    "type": "hype.Text"
                                  },
                                  [
                                    {
                                      "atom": "p",
                                      "file": "concurrency.md",
                                      "nodes": [
                                        {
                                          "text": "Go does not allow developers to control the scheduling of goroutines.",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Paragraph"
                                    }
                                  ],
                                  {
                                    "text": "\n",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Goroutines are created in code and are then scheduled by the Go runtime scheduler, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-7"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-7"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.7",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-7"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The scheduler is then responsible to managing those goroutines across multiple OS threads.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-7",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "img",
                                        "attributes": {
                                          "src": "assets/goroutines.svg",
                                          "width": "100%"
                                        },
                                        "file": ".",
                                        "type": "*hype.Image"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.7:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The Go runtime scheduler.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 7,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "concurrency.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Work Sharing and Stealing",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Go uses a dual model of \"work sharing\" and ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "href": "https://en.wikipedia.org/wiki/Work_stealing",
                                          "target": "_blank"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "text": "\"work stealing\"",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://en.wikipedia.org/wiki/Work_stealing"
                                      }
                                    ],
                                    {
                                      "text": " to manage goroutines.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h3",
                                  "file": "concurrency.md",
                                  "level": 3,
                                  "nodes": [
                                    {
                                      "text": "Work Sharing",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "With work sharing the scheduler will try to distribute the work to the available processes. This will make better use of the available CPUs.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-8",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-text",
                                              "language": "text"
                                            },
                                            "file": ".",
                                            "lang": "text",
                                            "nodes": [
                                              {
                                                "text": "CPU1: A  B  C  D  E  F  G\nCPU2: H  I\nCPU3: J  K\nCPU4:\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.8:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "CPU load before work sharing.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 8,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-8"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-8"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.8",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-8"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " we see an uneven distribution of goroutines across the CPUs. Work sharing will make sure that the goroutines are distributed evenly across the available CPUs, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-9"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-9"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.9",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-9"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-9",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-text",
                                              "language": "text"
                                            },
                                            "file": ".",
                                            "lang": "text",
                                            "nodes": [
                                              {
                                                "text": "CPU1: A  B  C\nCPU2: D  E  F\nCPU3: G  H  I\nCPU4: J  K\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.9:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "CPU load after work sharing.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 9,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h3",
                                  "file": "concurrency.md",
                                  "level": 3,
                                  "nodes": [
                                    {
                                      "text": "Work Stealing",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Unlike work sharing, work stealing works from the other-side of the scheduler. An underutilized process in the scheduler will attempt to steal work from an another process.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-10",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-text",
                                              "language": "text"
                                            },
                                            "file": ".",
                                            "lang": "text",
                                            "nodes": [
                                              {
                                                "text": "CPU1: A  B  C  D  E  F  G\nCPU2: H  I\nCPU3: J  K\nCPU4:\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.10:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "CPU load before work stealing.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 10,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-10"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-10"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.10",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-10"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " we see an uneven distribution of goroutines across the CPUs. Work stealing will steal work from the other CPUs, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-11"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-11"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.11",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-11"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", to make the distribution even.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-11",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-text",
                                              "language": "text"
                                            },
                                            "file": ".",
                                            "lang": "text",
                                            "nodes": [
                                              {
                                                "text": "CPU1: A  C  D  E  F  G\nCPU2: H  I\nCPU3: J  K\nCPU4: B\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.11:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "CPU load after work stealing.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 11,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "concurrency.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Don't Worry About the Scheduler",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Go offers little to developers in the way of managing, controlling, or tuning the scheduler. Each release of Go makes subtle, sometimes large, and sometimes non-obvious changes to the scheduler and garbage collector. Because of this, there is little point to worrying about the inner workings of the scheduler on a daily basis.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "runtime",
                                          "href": "https://pkg.go.dev/runtime",
                                          "target": "_blank"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "concurrency.md",
                                            "nodes": [
                                              {
                                                "text": "runtime",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/runtime"
                                      }
                                    ],
                                    {
                                      "text": " package provides a number of functions that can be used to query, and make small changes, to the Go runtime. One of the most useful functions is ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "runtime#GOMAXPROCS",
                                          "href": "https://pkg.go.dev/runtime#GOMAXPROCS",
                                          "target": "_blank"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "concurrency.md",
                                            "nodes": [
                                              {
                                                "text": "runtime.GOMAXPROCS",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/runtime#GOMAXPROCS"
                                      }
                                    ],
                                    {
                                      "text": ", ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-12"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-12"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.12",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-12"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", which allows you to set the number of OS threads that the Go runtime will use.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-12",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "doc",
                                          "runtime.GOMAXPROCS"
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "doc": "runtime.GOMAXPROCS",
                                          "exec": "go doc runtime.GOMAXPROCS"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go doc runtime.GOMAXPROCS\n\npackage runtime // import \u0026#34;runtime\u0026#34;\n\nfunc GOMAXPROCS(n int) int\n    GOMAXPROCS sets the maximum number of CPUs that can be executing\n    simultaneously and returns the previous setting. It defaults to the value of\n    runtime.NumCPU. If n \u0026lt; 1, it does not change the current setting. This call\n    will go away when the scheduler improves.",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "doc",
                                                "runtime.GOMAXPROCS"
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                              "stdout": "cGFja2FnZSBydW50aW1lIC8vIGltcG9ydCAicnVudGltZSIKCmZ1bmMgR09NQVhQUk9DUyhuIGludCkgaW50CiAgICBHT01BWFBST0NTIHNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIENQVXMgdGhhdCBjYW4gYmUgZXhlY3V0aW5nCiAgICBzaW11bHRhbmVvdXNseSBhbmQgcmV0dXJucyB0aGUgcHJldmlvdXMgc2V0dGluZy4gSXQgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mCiAgICBydW50aW1lLk51bUNQVS4gSWYgbiA8IDEsIGl0IGRvZXMgbm90IGNoYW5nZSB0aGUgY3VycmVudCBzZXR0aW5nLiBUaGlzIGNhbGwKICAgIHdpbGwgZ28gYXdheSB3aGVuIHRoZSBzY2hlZHVsZXIgaW1wcm92ZXMu",
                                              "duration": 203788708,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go doc runtime.GOMAXPROCS\n\npackage runtime // import \u0026#34;runtime\u0026#34;\n\nfunc GOMAXPROCS(n int) int\n    GOMAXPROCS sets the maximum number of CPUs that can be executing\n    simultaneously and returns the previous setting. It defaults to the value of\n    runtime.NumCPU. If n \u0026lt; 1, it does not change the current setting. This call\n    will go away when the scheduler improves.",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "doc",
                                              "runtime.GOMAXPROCS"
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                            "stdout": "cGFja2FnZSBydW50aW1lIC8vIGltcG9ydCAicnVudGltZSIKCmZ1bmMgR09NQVhQUk9DUyhuIGludCkgaW50CiAgICBHT01BWFBST0NTIHNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIENQVXMgdGhhdCBjYW4gYmUgZXhlY3V0aW5nCiAgICBzaW11bHRhbmVvdXNseSBhbmQgcmV0dXJucyB0aGUgcHJldmlvdXMgc2V0dGluZy4gSXQgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mCiAgICBydW50aW1lLk51bUNQVS4gSWYgbiA8IDEsIGl0IGRvZXMgbm90IGNoYW5nZSB0aGUgY3VycmVudCBzZXR0aW5nLiBUaGlzIGNhbGwKICAgIHdpbGwgZ28gYXdheSB3aGVuIHRoZSBzY2hlZHVsZXIgaW1wcm92ZXMu",
                                            "duration": 203788708,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.12:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "a",
                                              "attributes": {
                                                "for": "runtime#GOMAXPROCS",
                                                "href": "https://pkg.go.dev/runtime#GOMAXPROCS",
                                                "target": "_blank"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                [
                                                  {
                                                    "atom": "code",
                                                    "file": ".",
                                                    "nodes": [
                                                      {
                                                        "text": "runtime.GOMAXPROCS",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.InlineCode"
                                                  }
                                                ]
                                              ],
                                              "type": "*hype.Link",
                                              "url": "https://pkg.go.dev/runtime#GOMAXPROCS"
                                            }
                                          ],
                                          {
                                            "text": " function.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 12,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "concurrency.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Goroutine Example",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "Consider the program in ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-13"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-13"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.13",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-13"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". This program should be familiar to you, it is a basic \"Hello, World\" program. The difference is that it uses a goroutine to print the message.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-13",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/concurrency/first/main.go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "package main\n\nimport \u0026#34;fmt\u0026#34;\n\nfunc main() {\n\tgo fmt.Println(\u0026#34;Hello, World!\u0026#34;)\n}\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.13:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Using a goroutine to print ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "text": "Hello, World!",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 13,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "When this code is run, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-14"
                                        },
                                        "file": "concurrency.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-14"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.14",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-14"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", no message will be printed out. The reason is the before the scheduler has a chance to run the goroutine, the program has exited. Later, in this ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "binding",
                                      "attributes": {
                                        "whole": ""
                                      },
                                      "file": "concurrency.md",
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " we will learn how to prevent premature exiting from a program before the scheduler has a chance to run its goroutines. We will also learn how to let our running goroutines know when it is time for them to stop.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-14",
                                    "type": "listing"
                                  },
                                  "file": "concurrency.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/concurrency/first"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/concurrency/first",
                                              "duration": 935353042,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/concurrency/first",
                                            "duration": 935353042,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.14:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The goroutine was never run.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 14,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "title": "Go's Concurrency Model",
                            "type": "*hype.Page"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "type": "*hype.Include"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "include",
                      "attributes": {
                        "src": "channels.md"
                      },
                      "dir": ".",
                      "file": "module.md",
                      "nodes": [
                        [
                          {
                            "atom": "page",
                            "file": "channels.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h1",
                                  "file": "channels.md",
                                  "level": 1,
                                  "nodes": [
                                    {
                                      "text": "Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Channels are a conduit in Go used to communicate between goroutines. This section covers basic channel usage along with the corresponding patterns for each. We will find out the difference between a buffered and un-buffered channel, and when to use them. We will also learn how to use channels for signaling for concepts such as graceful application shutdown. Finally, we will learn how to spot common concurrency pitfalls and how to properly structure your concurrent code for to avoid them.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "What are Channels?",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Channels are a typed conduit through which you can send and receive values. All channels have the characteristics defined in ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-15"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-15"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.15",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-15"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-15",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "h3",
                                        "file": ".",
                                        "level": 3,
                                        "nodes": [
                                          {
                                            "text": "Characteristics of Channels",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "hype.Heading"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ul",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "The are typed. You can only send and receive values of the same type. Ex. You can't send a string and an int over the same channel.",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "The values are transmitted/received in a synchronous manner. The sender and receiver must wait for the other to finish before sending or receiving.",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "The values are transmitted/received in a FIFO manner. The first value sent is the first value received.",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "They are either un-buffered or buffered. A buffered channel will hold a limited number of values. When the channel is full, the sender will block until a value is received. When the channel is empty, the receiver will block until a value is sent.",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "They are directional. Channels can either be bi-directional or uni-directional. A bi-directional channel can be used to send and receive values. A uni-directional channel can only be used to send or receive values.",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.UL"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.15:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Characteristics of Channels.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 15,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Understanding Channel Blocking/Unblocking",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "To understand channels you need to understand when they block and when they unblock. Consider the idea of a making a phone call. When you call someone you are blocked until they pickup the call. Once connected you are unblocked and can start bi-directional communication, in this case audio can now be exchanged back and forth between yourself and the person you are calling. The channel type would be ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "audio",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " and you would not be able to pass each other a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "fruit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " over the phone line.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-16",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "table",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "text": "\n  ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "atom": "tbody",
                                            "file": ".",
                                            "nodes": [
                                              {
                                                "text": "\n  ",
                                                "type": "hype.Text"
                                              },
                                              [
                                                {
                                                  "atom": "tr",
                                                  "file": ".",
                                                  "nodes": [
                                                    {
                                                      "text": "\n    ",
                                                      "type": "hype.Text"
                                                    },
                                                    [
                                                      {
                                                        "atom": "td",
                                                        "file": ".",
                                                        "nodes": [
                                                          {
                                                            "text": "\n",
                                                            "type": "hype.Text"
                                                          },
                                                          [
                                                            {
                                                              "atom": "img",
                                                              "attributes": {
                                                                "src": "assets/blocking.png",
                                                                "style": "width: 100%; object-fit: contain;"
                                                              },
                                                              "file": ".",
                                                              "type": "*hype.Image"
                                                            }
                                                          ],
                                                          {
                                                            "text": "\n",
                                                            "type": "hype.Text"
                                                          }
                                                        ],
                                                        "type": "*hype.TD"
                                                      }
                                                    ],
                                                    {
                                                      "text": "\n    ",
                                                      "type": "hype.Text"
                                                    },
                                                    [
                                                      {
                                                        "atom": "td",
                                                        "file": ".",
                                                        "nodes": [
                                                          {
                                                            "text": "\n",
                                                            "type": "hype.Text"
                                                          },
                                                          [
                                                            {
                                                              "atom": "img",
                                                              "attributes": {
                                                                "src": "assets/unblocked.png",
                                                                "style": "width: 100%; object-fit: contain;"
                                                              },
                                                              "file": ".",
                                                              "type": "*hype.Image"
                                                            }
                                                          ],
                                                          {
                                                            "text": "\n",
                                                            "type": "hype.Text"
                                                          }
                                                        ],
                                                        "type": "*hype.TD"
                                                      }
                                                    ],
                                                    {
                                                      "text": "\n    ",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.TR"
                                                }
                                              ],
                                              {
                                                "text": "\n  ",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Table"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.16:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Blocking and Unblocking for a telephone call.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 16,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-16"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-16"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.16",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-16"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " we see the caller is blocked until the receiver picks up the call. Once the receiver picks up the phone, the call is unblocked and can start bi-directional communication. In this scenario, a phone call is a bi-directional channel. A phone call is an un-buffered channel. The caller and receiver are both blocked until the other unblocks them. Finally, the channel would have a type of ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "audio",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ul",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "li",
                                        "file": "channels.md",
                                        "list-type": "ul",
                                        "nodes": [
                                          {
                                            "text": "A bi-directional channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.LI"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "li",
                                        "file": "channels.md",
                                        "list-type": "ul",
                                        "nodes": [
                                          {
                                            "text": "An un-buffered channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.LI"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "li",
                                        "file": "channels.md",
                                        "list-type": "ul",
                                        "nodes": [
                                          {
                                            "text": "Its type is ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": "channels.md",
                                              "nodes": [
                                                {
                                                  "text": "audio",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.LI"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.UL"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Creating Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Channels are indicated by the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "chan",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " keyword followed by the type of the channel. For example, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "chan string",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " indicates a channel of strings, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "chan int",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " indicates a channel of integers, and so on.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "New channels are created with the builtin, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "builtin#make",
                                          "href": "https://pkg.go.dev/builtin#make",
                                          "target": "_blank"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "channels.md",
                                            "nodes": [
                                              {
                                                "text": "make",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/builtin#make"
                                      }
                                    ],
                                    {
                                      "text": " function, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-17"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-17"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.17",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-17"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". For example, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "make(chan string)",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " creates a channel of strings.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-17",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "doc",
                                          "builtin.make"
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "doc": "builtin.make",
                                          "exec": "go doc builtin.make"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go doc builtin.make\n\npackage builtin // import \u0026#34;builtin\u0026#34;\n\nfunc make(t Type, size ...IntegerType) Type\n    The make built-in function allocates and initializes an object of type\n    slice, map, or chan (only). Like new, the first argument is a type,\n    not a value. Unlike new, make\u0026#39;s return type is the same as the type of its\n    argument, not a pointer to it. The specification of the result depends on\n    the type:\n\n        Slice: The size specifies the length. The capacity of the slice is\n        equal to its length. A second integer argument may be provided to\n        specify a different capacity; it must be no smaller than the\n        length. For example, make([]int, 0, 10) allocates an underlying array\n        of size 10 and returns a slice of length 0 and capacity 10 that is\n        backed by this underlying array.\n        Map: An empty map is allocated with enough space to hold the\n        specified number of elements. The size may be omitted, in which case\n        a small starting size is allocated.\n        Channel: The channel\u0026#39;s buffer is initialized with the specified\n        buffer capacity. If zero, or the size is omitted, the channel is\n        unbuffered.",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "doc",
                                                "builtin.make"
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                              "stdout": "cGFja2FnZSBidWlsdGluIC8vIGltcG9ydCAiYnVpbHRpbiIKCmZ1bmMgbWFrZSh0IFR5cGUsIHNpemUgLi4uSW50ZWdlclR5cGUpIFR5cGUKICAgIFRoZSBtYWtlIGJ1aWx0LWluIGZ1bmN0aW9uIGFsbG9jYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gb2JqZWN0IG9mIHR5cGUKICAgIHNsaWNlLCBtYXAsIG9yIGNoYW4gKG9ubHkpLiBMaWtlIG5ldywgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgdHlwZSwKICAgIG5vdCBhIHZhbHVlLiBVbmxpa2UgbmV3LCBtYWtlJ3MgcmV0dXJuIHR5cGUgaXMgdGhlIHNhbWUgYXMgdGhlIHR5cGUgb2YgaXRzCiAgICBhcmd1bWVudCwgbm90IGEgcG9pbnRlciB0byBpdC4gVGhlIHNwZWNpZmljYXRpb24gb2YgdGhlIHJlc3VsdCBkZXBlbmRzIG9uCiAgICB0aGUgdHlwZToKCiAgICAgICAgU2xpY2U6IFRoZSBzaXplIHNwZWNpZmllcyB0aGUgbGVuZ3RoLiBUaGUgY2FwYWNpdHkgb2YgdGhlIHNsaWNlIGlzCiAgICAgICAgZXF1YWwgdG8gaXRzIGxlbmd0aC4gQSBzZWNvbmQgaW50ZWdlciBhcmd1bWVudCBtYXkgYmUgcHJvdmlkZWQgdG8KICAgICAgICBzcGVjaWZ5IGEgZGlmZmVyZW50IGNhcGFjaXR5OyBpdCBtdXN0IGJlIG5vIHNtYWxsZXIgdGhhbiB0aGUKICAgICAgICBsZW5ndGguIEZvciBleGFtcGxlLCBtYWtlKFtdaW50LCAwLCAxMCkgYWxsb2NhdGVzIGFuIHVuZGVybHlpbmcgYXJyYXkKICAgICAgICBvZiBzaXplIDEwIGFuZCByZXR1cm5zIGEgc2xpY2Ugb2YgbGVuZ3RoIDAgYW5kIGNhcGFjaXR5IDEwIHRoYXQgaXMKICAgICAgICBiYWNrZWQgYnkgdGhpcyB1bmRlcmx5aW5nIGFycmF5LgogICAgICAgIE1hcDogQW4gZW1wdHkgbWFwIGlzIGFsbG9jYXRlZCB3aXRoIGVub3VnaCBzcGFjZSB0byBob2xkIHRoZQogICAgICAgIHNwZWNpZmllZCBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBzaXplIG1heSBiZSBvbWl0dGVkLCBpbiB3aGljaCBjYXNlCiAgICAgICAgYSBzbWFsbCBzdGFydGluZyBzaXplIGlzIGFsbG9jYXRlZC4KICAgICAgICBDaGFubmVsOiBUaGUgY2hhbm5lbCdzIGJ1ZmZlciBpcyBpbml0aWFsaXplZCB3aXRoIHRoZSBzcGVjaWZpZWQKICAgICAgICBidWZmZXIgY2FwYWNpdHkuIElmIHplcm8sIG9yIHRoZSBzaXplIGlzIG9taXR0ZWQsIHRoZSBjaGFubmVsIGlzCiAgICAgICAgdW5idWZmZXJlZC4=",
                                              "duration": 330847125,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go doc builtin.make\n\npackage builtin // import \u0026#34;builtin\u0026#34;\n\nfunc make(t Type, size ...IntegerType) Type\n    The make built-in function allocates and initializes an object of type\n    slice, map, or chan (only). Like new, the first argument is a type,\n    not a value. Unlike new, make\u0026#39;s return type is the same as the type of its\n    argument, not a pointer to it. The specification of the result depends on\n    the type:\n\n        Slice: The size specifies the length. The capacity of the slice is\n        equal to its length. A second integer argument may be provided to\n        specify a different capacity; it must be no smaller than the\n        length. For example, make([]int, 0, 10) allocates an underlying array\n        of size 10 and returns a slice of length 0 and capacity 10 that is\n        backed by this underlying array.\n        Map: An empty map is allocated with enough space to hold the\n        specified number of elements. The size may be omitted, in which case\n        a small starting size is allocated.\n        Channel: The channel\u0026#39;s buffer is initialized with the specified\n        buffer capacity. If zero, or the size is omitted, the channel is\n        unbuffered.",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "doc",
                                              "builtin.make"
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                            "stdout": "cGFja2FnZSBidWlsdGluIC8vIGltcG9ydCAiYnVpbHRpbiIKCmZ1bmMgbWFrZSh0IFR5cGUsIHNpemUgLi4uSW50ZWdlclR5cGUpIFR5cGUKICAgIFRoZSBtYWtlIGJ1aWx0LWluIGZ1bmN0aW9uIGFsbG9jYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gb2JqZWN0IG9mIHR5cGUKICAgIHNsaWNlLCBtYXAsIG9yIGNoYW4gKG9ubHkpLiBMaWtlIG5ldywgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgdHlwZSwKICAgIG5vdCBhIHZhbHVlLiBVbmxpa2UgbmV3LCBtYWtlJ3MgcmV0dXJuIHR5cGUgaXMgdGhlIHNhbWUgYXMgdGhlIHR5cGUgb2YgaXRzCiAgICBhcmd1bWVudCwgbm90IGEgcG9pbnRlciB0byBpdC4gVGhlIHNwZWNpZmljYXRpb24gb2YgdGhlIHJlc3VsdCBkZXBlbmRzIG9uCiAgICB0aGUgdHlwZToKCiAgICAgICAgU2xpY2U6IFRoZSBzaXplIHNwZWNpZmllcyB0aGUgbGVuZ3RoLiBUaGUgY2FwYWNpdHkgb2YgdGhlIHNsaWNlIGlzCiAgICAgICAgZXF1YWwgdG8gaXRzIGxlbmd0aC4gQSBzZWNvbmQgaW50ZWdlciBhcmd1bWVudCBtYXkgYmUgcHJvdmlkZWQgdG8KICAgICAgICBzcGVjaWZ5IGEgZGlmZmVyZW50IGNhcGFjaXR5OyBpdCBtdXN0IGJlIG5vIHNtYWxsZXIgdGhhbiB0aGUKICAgICAgICBsZW5ndGguIEZvciBleGFtcGxlLCBtYWtlKFtdaW50LCAwLCAxMCkgYWxsb2NhdGVzIGFuIHVuZGVybHlpbmcgYXJyYXkKICAgICAgICBvZiBzaXplIDEwIGFuZCByZXR1cm5zIGEgc2xpY2Ugb2YgbGVuZ3RoIDAgYW5kIGNhcGFjaXR5IDEwIHRoYXQgaXMKICAgICAgICBiYWNrZWQgYnkgdGhpcyB1bmRlcmx5aW5nIGFycmF5LgogICAgICAgIE1hcDogQW4gZW1wdHkgbWFwIGlzIGFsbG9jYXRlZCB3aXRoIGVub3VnaCBzcGFjZSB0byBob2xkIHRoZQogICAgICAgIHNwZWNpZmllZCBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBzaXplIG1heSBiZSBvbWl0dGVkLCBpbiB3aGljaCBjYXNlCiAgICAgICAgYSBzbWFsbCBzdGFydGluZyBzaXplIGlzIGFsbG9jYXRlZC4KICAgICAgICBDaGFubmVsOiBUaGUgY2hhbm5lbCdzIGJ1ZmZlciBpcyBpbml0aWFsaXplZCB3aXRoIHRoZSBzcGVjaWZpZWQKICAgICAgICBidWZmZXIgY2FwYWNpdHkuIElmIHplcm8sIG9yIHRoZSBzaXplIGlzIG9taXR0ZWQsIHRoZSBjaGFubmVsIGlzCiAgICAgICAgdW5idWZmZXJlZC4=",
                                            "duration": 330847125,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.17:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "a",
                                              "attributes": {
                                                "for": "builtin#make",
                                                "href": "https://pkg.go.dev/builtin#make",
                                                "target": "_blank"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                [
                                                  {
                                                    "atom": "code",
                                                    "file": ".",
                                                    "nodes": [
                                                      {
                                                        "text": "make",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.InlineCode"
                                                  }
                                                ]
                                              ],
                                              "type": "*hype.Link",
                                              "url": "https://pkg.go.dev/builtin#make"
                                            }
                                          ],
                                          {
                                            "text": " function.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 17,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Sending and Receiving Values",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "In Go, the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "\u0026lt;-",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " operator is used to indicate sending or receiving information on a channel. At first it can be difficult to remember where the arrow goes and what the arrow indicates.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "When working with channels the arrow, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-18"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-18"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.18",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-18"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", points in the direction the data is traveling in regards to the channel.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-18",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "file": ".",
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "ch \u0026lt;- // data is going into the channel\n\u0026lt;- ch // data is coming out of the channel\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.18:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Arrows indicating sending and receiving data.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 18,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Consider the following code. The first line blocks trying to send, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "Hello, Janis!",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ", to the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "phone",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "phone \u0026lt;- \"Hello, Janis!\"",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ". This line will only unblock when someone else is ready to receive the message. Once the message is sent and received the application is unblocked and may continue to run.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "The second line will block trying to receive a message from the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "phone",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "msg := \u0026lt;-phone",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ". This line will only unblock when someone else is ready to send the message. Once the message is sent and received the application is unblocked and may continue to run.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-19",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/channels/simple/main.go#blocking"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "// This line blocks until there is a line of code ready to\n// read from the channel.\nphone \u003c- \"Hello, Janis!\"\n\n// This line blocks until there is a line of code ready to\n// send a message down the channel.\nmsg := \u003c-phone",
                                                "file": "src/channels/simple/main.go",
                                                "lang": "go",
                                                "name": "blocking",
                                                "start": 31,
                                                "end": 39,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.19:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A simple example of blocking and unblocking.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 19,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "A Simple Channel Example",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Consider the example in ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-20"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-20"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.20",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-20"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". In this example, the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "Janis",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function is running as a goroutine. Because it is in a goroutine it can be blocked waiting to send/receive messages on a channel and not impact the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-20",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/channels/simple/main.go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "package main\n\nimport \u0026#34;fmt\u0026#34;\n\nfunc Janis(ch chan string) {\n\t// This line blocks until a message is sent to the channel\n\tmsg := \u0026lt;-ch\n\n\tfmt.Println(\u0026#34;Jimi said:\u0026#34;, msg)\n\n\t// This line blocks until the channel is read from\n\tch \u0026lt;- \u0026#34;Hello, Jimi!\u0026#34;\n}\n\nfunc main() {\n\n\t// make a new channel of type string\n\t// and assign it to the phone variable\n\tphone := make(chan string)\n\n\t// Close the channel to signal that no more messages will be sent/received.\n\tdefer close(phone)\n\n\t// Launch the Janis function as a goroutine.\n\t// This will run concurrently with the main function.\n\tgo Janis(phone)\n\n\t// This line blocks until there is a line of code ready to\n\t// read from the channel.\n\tphone \u0026lt;- \u0026#34;Hello, Janis!\u0026#34;\n\n\t// This line blocks until there is a line of code ready to\n\t// send a message down the channel.\n\tmsg := \u0026lt;-phone\n\n\tfmt.Println(\u0026#34;Janis said:\u0026#34;, msg)\n\n}\n\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/channels/simple"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nJimi said: Hello, Janis!\nJanis said: Hello, Jimi!",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/channels/simple",
                                              "stdout": "SmltaSBzYWlkOiBIZWxsbywgSmFuaXMhCkphbmlzIHNhaWQ6IEhlbGxvLCBKaW1pIQ==",
                                              "duration": 344968750,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nJimi said: Hello, Janis!\nJanis said: Hello, Jimi!",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/channels/simple",
                                            "stdout": "SmltaSBzYWlkOiBIZWxsbywgSmFuaXMhCkphbmlzIHNhaWQ6IEhlbGxvLCBKaW1pIQ==",
                                            "duration": 344968750,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.20:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A simple example of a channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 20,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "If we were to stop using a goroutine for the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "Janis",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-21"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-21"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.21",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-21"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", and instead, ran the function serially in the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function, the application would deadlock and crash. This is because the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "Janis",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " is blocking waiting for a message on the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "phone",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel, but the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function is unable to send a message on the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "phone",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel because ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "Janis",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " is blocked.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-21",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/channels/simple-broken/main.go#example"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// make a new channel of type string\n\t// and assign it to the phone variable\n\tphone := make(chan string)\n\n\t// Close the channel to signal that no more messages will be sent/received.\n\tdefer close(phone)\n\n\t// Run the Amy serially instead of concurrently with a goroutine.\n\tAmy(phone)\n\n\t// This line blocks until Amy is ready to read from the channel.\n\tphone \u003c- \"Hello, Amy!\"\n\n\t// This line blocks until Amy sends a message back down the channel.\n\tmsg := \u003c-phone\n\n\tfmt.Println(\"Amy said:\", msg)\n\n}",
                                                "file": "src/channels/simple-broken/main.go",
                                                "lang": "go",
                                                "name": "example",
                                                "start": 15,
                                                "end": 42,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "exit": "-1",
                                          "run": ".",
                                          "src": "src/channels/simple-broken"
                                        },
                                        "expected_exit": -1,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan receive]:\nmain.Amy(0x1400009c058?)\n\t./main.go:7 +0x28\nmain.main()\n\t./main.go:28 +0x60\nexit status 2",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/channels/simple-broken",
                                              "err": {
                                                "Stderr": null
                                              },
                                              "exit": 1,
                                              "stderr": "ZmF0YWwgZXJyb3I6IGFsbCBnb3JvdXRpbmVzIGFyZSBhc2xlZXAgLSBkZWFkbG9jayEKCmdvcm91dGluZSAxIFtjaGFuIHJlY2VpdmVdOgptYWluLkFteSgweDE0MDAwMDljMDU4PykKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvY2hhbm5lbHMvc2ltcGxlLWJyb2tlbi9tYWluLmdvOjcgKzB4MjgKbWFpbi5tYWluKCkKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvY2hhbm5lbHMvc2ltcGxlLWJyb2tlbi9tYWluLmdvOjI4ICsweDYwCmV4aXQgc3RhdHVzIDI=",
                                              "duration": 1066615709,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan receive]:\nmain.Amy(0x1400009c058?)\n\t./main.go:7 +0x28\nmain.main()\n\t./main.go:28 +0x60\nexit status 2",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/channels/simple-broken",
                                            "err": {
                                              "Stderr": null
                                            },
                                            "exit": 1,
                                            "stderr": "ZmF0YWwgZXJyb3I6IGFsbCBnb3JvdXRpbmVzIGFyZSBhc2xlZXAgLSBkZWFkbG9jayEKCmdvcm91dGluZSAxIFtjaGFuIHJlY2VpdmVdOgptYWluLkFteSgweDE0MDAwMDljMDU4PykKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvY2hhbm5lbHMvc2ltcGxlLWJyb2tlbi9tYWluLmdvOjcgKzB4MjgKbWFpbi5tYWluKCkKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvY2hhbm5lbHMvc2ltcGxlLWJyb2tlbi9tYWluLmdvOjI4ICsweDYwCmV4aXQgc3RhdHVzIDI=",
                                            "duration": 1066615709,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.21:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Deadlock caused by a channel that can't be unblocked.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 21,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Ranging over a Channel",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Often you will want to keep listening for messages on a channel until the channel is closed. This can be done with an infinite loop, but the more appropriate way is to use a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "for range",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " loop, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-22"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-22"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.22",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-22"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". When the channel is closed the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "range",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " loop will stop iterating and the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "listener",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function will return. We will discuss closing channels in more detail shortly.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-22",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/channels/range/main.go#listener"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func listener(ch chan int) {\n\tfor i := range ch {\n\t\tfmt.Println(i)\n\t}\n\n\tfmt.Println(\"listener exit\")\n}",
                                                "file": "src/channels/range/main.go",
                                                "lang": "go",
                                                "name": "listener",
                                                "start": 8,
                                                "end": 17,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.22:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A simple example of a range loop.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 22,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Listening to Channels with ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ]
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "When writing concurrent applications, it is often useful to listen to multiple channels at the same time. For example, an employee might need to listen to multiple channels at the same time, such as to receive work from their boss or be told that it is time to stop. The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement lets a goroutine wait on multiple channels and respond to the first channel that is ready.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Consider the old telephone switchboards, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-23"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-23"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.23",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-23"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The telephone operator waits for incoming calls into the switchboard. When a call comes in, the operator answers the call and redirects the call to the appropriate destination. The operator then goes back to waiting for the next incoming call and so on.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-23",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "img",
                                        "attributes": {
                                          "src": "assets/switchboard.jpg"
                                        },
                                        "file": ".",
                                        "type": "*hype.Image"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.23:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A telephone switchboard.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 23,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Using ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " Statements",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement lets a goroutine wait on multiple channels and respond to the first channel that is ready. The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement will block until one of the channels is ready. Once it is ready, the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement will execute the corresponding ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "case",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " and the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement will exit. Because the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " can only be run once, it is often wrapped inside of an infinite ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "for",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " loop to re-run the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement after ever ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "case",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " is executed.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Consider ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-24"
                                        },
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-24"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.24",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-24"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "operator",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function takes three different channels as arguments. The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "channels.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement will listen to each channel and respond to the first channel that is ready.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-24",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/select/select/main.go#operator"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func operator(line1 chan string, line2 chan string, quit chan struct{}) {\n\n\t// Use an infinite loop to keep listening for new messages after\n\t// handling a previous one.\n\tfor {\n\n\t\t// select blocks until one of the cases can be executed.\n\t\tselect {\n\t\tcase msg := \u003c-line1: // listen for incoming messages on line1 and assign to msg variable\n\t\t\tfmt.Printf(\"Line 1: %s\\n\", msg)\n\t\tcase msg := \u003c-line2: // listen for incoming messages on line2 and assign to msg variable\n\t\t\tfmt.Printf(\"Line 2: %s\\n\", msg)\n\t\tcase \u003c-quit: // listen for the quit channel to be closed and exit the function\n\t\t\tfmt.Println(\"Quit\")\n\t\t\treturn\n\t\t}\n\n\t}\n}",
                                                "file": "src/select/select/main.go",
                                                "lang": "go",
                                                "name": "operator",
                                                "start": 13,
                                                "end": 34,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.24:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "An example of a ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "text": "select",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": " statement.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 24,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "channels.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Channels are not Message Queues",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "Only one goroutine will receive a message sent down a channel. If multiple goroutines are listening to a channel, only one will receive the message.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "It is also possible, and likely, that one goroutine will receive more messages than another goroutine.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-25",
                                    "type": "listing"
                                  },
                                  "file": "channels.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/channels/message-queue/main.go#example"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\tconst N = 5\n\n\t// make a new channel\n\t// of type int\n\tch := make(chan int)\n\n\tfor i := 0; i \u003c N; i++ {\n\n\t\t// create a goroutine to listen to the channel\n\t\tgo func(i int) {\n\n\t\t\t// listen for new messages\n\t\t\tfor m := range ch {\n\t\t\t\tfmt.Printf(\"routine %d received %d\\n\", i, m)\n\t\t\t}\n\n\t\t}(i)\n\t}\n\n\t// print messages to the channel\n\tfor i := 0; i \u003c N*2; i++ {\n\t\tch \u003c- i\n\t}\n\n\t// close the channel\n\t// this will break the `range`\n\t// statement in the goroutine\n\tclose(ch)\n\n\t// wait for the goroutines to finish\n\ttime.Sleep(50 * time.Millisecond)\n}",
                                                "file": "src/channels/message-queue/main.go",
                                                "lang": "go",
                                                "name": "example",
                                                "start": 8,
                                                "end": 43,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/channels/message-queue"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nroutine 4 received 0\nroutine 4 received 4\nroutine 4 received 6\nroutine 0 received 2\nroutine 3 received 3\nroutine 3 received 8\nroutine 4 received 7\nroutine 2 received 5\nroutine 1 received 1\nroutine 3 received 9",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/channels/message-queue",
                                              "stdout": "cm91dGluZSA0IHJlY2VpdmVkIDAKcm91dGluZSA0IHJlY2VpdmVkIDQKcm91dGluZSA0IHJlY2VpdmVkIDYKcm91dGluZSAwIHJlY2VpdmVkIDIKcm91dGluZSAzIHJlY2VpdmVkIDMKcm91dGluZSAzIHJlY2VpdmVkIDgKcm91dGluZSA0IHJlY2VpdmVkIDcKcm91dGluZSAyIHJlY2VpdmVkIDUKcm91dGluZSAxIHJlY2VpdmVkIDEKcm91dGluZSAzIHJlY2VpdmVkIDk=",
                                              "duration": 328026708,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nroutine 4 received 0\nroutine 4 received 4\nroutine 4 received 6\nroutine 0 received 2\nroutine 3 received 3\nroutine 3 received 8\nroutine 4 received 7\nroutine 2 received 5\nroutine 1 received 1\nroutine 3 received 9",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/channels/message-queue",
                                            "stdout": "cm91dGluZSA0IHJlY2VpdmVkIDAKcm91dGluZSA0IHJlY2VpdmVkIDQKcm91dGluZSA0IHJlY2VpdmVkIDYKcm91dGluZSAwIHJlY2VpdmVkIDIKcm91dGluZSAzIHJlY2VpdmVkIDMKcm91dGluZSAzIHJlY2VpdmVkIDgKcm91dGluZSA0IHJlY2VpdmVkIDcKcm91dGluZSAyIHJlY2VpdmVkIDUKcm91dGluZSAxIHJlY2VpdmVkIDEKcm91dGluZSAzIHJlY2VpdmVkIDk=",
                                            "duration": 328026708,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.25:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Messages are pulled off a channel by the first goroutine to read from it.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 25,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "title": "Channels",
                            "type": "*hype.Page"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "type": "*hype.Include"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "include",
                      "attributes": {
                        "src": "unidirectional.md"
                      },
                      "dir": ".",
                      "file": "module.md",
                      "nodes": [
                        [
                          {
                            "atom": "page",
                            "file": "unidirectional.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h1",
                                  "file": "unidirectional.md",
                                  "level": 1,
                                  "nodes": [
                                    {
                                      "text": "Uni-Directional Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "By default channels are bi-directional, meaning you can both send and receive data from the channel.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "A common use for uni-directional channels is when you are passing a channel as an argument or receiving a channel as return value. This allows for control of the channel for the function/method and prevents outside callers from polluting the channel.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "The standard library does this in the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "time",
                                          "href": "https://pkg.go.dev/time",
                                          "target": "_blank"
                                        },
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "unidirectional.md",
                                            "nodes": [
                                              {
                                                "text": "time",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/time"
                                      }
                                    ],
                                    {
                                      "text": " package with methods like ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "time#Ticker",
                                          "href": "https://pkg.go.dev/time#Ticker",
                                          "target": "_blank"
                                        },
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "unidirectional.md",
                                            "nodes": [
                                              {
                                                "text": "time.Ticker",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/time#Ticker"
                                      }
                                    ],
                                    {
                                      "text": ", ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-26"
                                        },
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-26"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.26",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-26"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-26",
                                    "type": "listing"
                                  },
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "doc",
                                          "time.Ticker"
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "doc": "time.Ticker",
                                          "exec": "go doc time.Ticker"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go doc time.Ticker\n\npackage time // import \u0026#34;time\u0026#34;\n\ntype Ticker struct {\n\tC \u0026lt;-chan Time // The channel on which the ticks are delivered.\n\t// Has unexported fields.\n}\n    A Ticker holds a channel that delivers “ticks” of a clock at intervals.\n\nfunc NewTicker(d Duration) *Ticker\nfunc (t *Ticker) Reset(d Duration)\nfunc (t *Ticker) Stop()",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "doc",
                                                "time.Ticker"
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                              "stdout": "cGFja2FnZSB0aW1lIC8vIGltcG9ydCAidGltZSIKCnR5cGUgVGlja2VyIHN0cnVjdCB7CglDIDwtY2hhbiBUaW1lIC8vIFRoZSBjaGFubmVsIG9uIHdoaWNoIHRoZSB0aWNrcyBhcmUgZGVsaXZlcmVkLgoJLy8gSGFzIHVuZXhwb3J0ZWQgZmllbGRzLgp9CiAgICBBIFRpY2tlciBob2xkcyBhIGNoYW5uZWwgdGhhdCBkZWxpdmVycyDigJx0aWNrc+KAnSBvZiBhIGNsb2NrIGF0IGludGVydmFscy4KCmZ1bmMgTmV3VGlja2VyKGQgRHVyYXRpb24pICpUaWNrZXIKZnVuYyAodCAqVGlja2VyKSBSZXNldChkIER1cmF0aW9uKQpmdW5jICh0ICpUaWNrZXIpIFN0b3AoKQ==",
                                              "duration": 217767334,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go doc time.Ticker\n\npackage time // import \u0026#34;time\u0026#34;\n\ntype Ticker struct {\n\tC \u0026lt;-chan Time // The channel on which the ticks are delivered.\n\t// Has unexported fields.\n}\n    A Ticker holds a channel that delivers “ticks” of a clock at intervals.\n\nfunc NewTicker(d Duration) *Ticker\nfunc (t *Ticker) Reset(d Duration)\nfunc (t *Ticker) Stop()",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "doc",
                                              "time.Ticker"
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                            "stdout": "cGFja2FnZSB0aW1lIC8vIGltcG9ydCAidGltZSIKCnR5cGUgVGlja2VyIHN0cnVjdCB7CglDIDwtY2hhbiBUaW1lIC8vIFRoZSBjaGFubmVsIG9uIHdoaWNoIHRoZSB0aWNrcyBhcmUgZGVsaXZlcmVkLgoJLy8gSGFzIHVuZXhwb3J0ZWQgZmllbGRzLgp9CiAgICBBIFRpY2tlciBob2xkcyBhIGNoYW5uZWwgdGhhdCBkZWxpdmVycyDigJx0aWNrc+KAnSBvZiBhIGNsb2NrIGF0IGludGVydmFscy4KCmZ1bmMgTmV3VGlja2VyKGQgRHVyYXRpb24pICpUaWNrZXIKZnVuYyAodCAqVGlja2VyKSBSZXNldChkIER1cmF0aW9uKQpmdW5jICh0ICpUaWNrZXIpIFN0b3AoKQ==",
                                            "duration": 217767334,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.26:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "a",
                                              "attributes": {
                                                "for": "time#Ticker",
                                                "href": "https://pkg.go.dev/time#Ticker",
                                                "target": "_blank"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                [
                                                  {
                                                    "atom": "code",
                                                    "file": ".",
                                                    "nodes": [
                                                      {
                                                        "text": "time.Ticker",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.InlineCode"
                                                  }
                                                ]
                                              ],
                                              "type": "*hype.Link",
                                              "url": "https://pkg.go.dev/time#Ticker"
                                            }
                                          ],
                                          {
                                            "text": " function.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 26,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "unidirectional.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Understanding Uni-Directional Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "Consider ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-27"
                                        },
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-27"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.27",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-27"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "Newspaper",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " contains a bi-directional channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "headlines chan string",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ", as a field. It also exposes two methods, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "TopHeadlines",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " and ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "ReportStory",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-27",
                                    "type": "listing"
                                  },
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "snippet": "type",
                                              "src": "src/channels/uni/main.go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "type Newspaper struct {\n\theadlines chan string\n\tquit      chan struct{}\n}\n\n// TopHeadlines returns a read-only channel of strings\n// that represent the top headlines of the newspaper.\n// This channel is consumed by newspaper readers.\nfunc (n Newspaper) TopHeadlines() \u003c-chan string {\n\treturn n.headlines\n}\n\n\n// ReportStory returns a write-only channel of strings\n// that a reporter can use to report a story.\nfunc (n Newspaper) ReportStory() chan\u003c- string {\n\treturn n.headlines\n}",
                                                "file": "src/channels/uni/main.go",
                                                "lang": "go",
                                                "name": "type",
                                                "start": 8,
                                                "end": 32,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.27:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "text": "Newspaper",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": " type.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 27,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "TopHeadlines",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " method returns a read-only version of the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "headlines",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel that can be consumed by newspaper readers.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "ReportStory",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " method returns a write-only version of the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "headlines",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel that can be used by newspaper reporters to report their stories to the newspaper.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "unidirectional.md",
                                  "nodes": [
                                    {
                                      "text": "In both cases, Go, casts the bi-directional channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "unidirectional.md",
                                        "nodes": [
                                          {
                                            "text": "headlines",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ", to the appropriate uni-directional channel returned by the method.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "title": "Uni-Directional Channels",
                            "type": "*hype.Page"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "type": "*hype.Include"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "include",
                      "attributes": {
                        "src": "closing.md"
                      },
                      "dir": ".",
                      "file": "module.md",
                      "nodes": [
                        [
                          {
                            "atom": "page",
                            "file": "closing.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h1",
                                  "file": "closing.md",
                                  "level": 1,
                                  "nodes": [
                                    {
                                      "text": "Closing Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "As we have seen so far, when a message is sent to a channel, only one receiver can pull that message off the channel. Channels do not provide a \"fan-out\" type of functionality where many receivers can pull the same message off of a channel.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "The exception to this rule is when a channel is closed. When a channel is closed ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "strong",
                                      "file": "closing.md",
                                      "nodes": [
                                        {
                                          "text": "ALL",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " receivers will be notified that the channel is closed. This can be exploited to signal many listeners, goroutines, that it is time to stop what they're doing.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-28",
                                    "type": "listing"
                                  },
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/closing/quit/main.go#listener"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func listener(i int, quit \u003c-chan struct{}) {\n\tfmt.Printf(\"listener %d is waiting\\n\", i)\n\n\t// this will block until the channel is closed\n\t\u003c-quit\n\n\tfmt.Printf(\"listener %d is exiting\\n\", i)\n}",
                                                "file": "src/closing/quit/main.go",
                                                "lang": "go",
                                                "name": "listener",
                                                "start": 8,
                                                "end": 18,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.28:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "text": "Listener",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": " function.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 28,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "Consider ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-28"
                                        },
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-28"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.28",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-28"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "listener",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function takes a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "\u0026lt;-chan struct{}",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " as the last argument, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ". The function listens for a signal on the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel, which is a blocking operation. When the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel is closed elsewhere, the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "listener",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function will exit.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-29",
                                    "type": "listing"
                                  },
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    null,
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/closing/quit/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\t// create a channel to signal listeners to exit\n\tquit := make(chan struct{})\n\n\t// create 5 listeners\n\tfor i := 0; i \u003c 5; i++ {\n\t\t// launch listener in a goroutine\n\t\tgo listener(i, quit)\n\t}\n\n\t// allow the listeners to start\n\ttime.Sleep(10 * time.Millisecond)\n\n\tfmt.Println(\"closing the quit channel\")\n\n\t// close the channel to signal listeners to exit\n\tclose(quit)\n\n\t// allow the listeners to exit\n\ttime.Sleep(50 * time.Millisecond)\n}",
                                                "file": "src/closing/quit/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 20,
                                                "end": 43,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/closing/quit"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nlistener 0 is waiting\nlistener 4 is waiting\nlistener 3 is waiting\nlistener 2 is waiting\nlistener 1 is waiting\nclosing the quit channel\nlistener 0 is exiting\nlistener 3 is exiting\nlistener 4 is exiting\nlistener 1 is exiting\nlistener 2 is exiting",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/quit",
                                              "stdout": "bGlzdGVuZXIgMCBpcyB3YWl0aW5nCmxpc3RlbmVyIDQgaXMgd2FpdGluZwpsaXN0ZW5lciAzIGlzIHdhaXRpbmcKbGlzdGVuZXIgMiBpcyB3YWl0aW5nCmxpc3RlbmVyIDEgaXMgd2FpdGluZwpjbG9zaW5nIHRoZSBxdWl0IGNoYW5uZWwKbGlzdGVuZXIgMCBpcyBleGl0aW5nCmxpc3RlbmVyIDMgaXMgZXhpdGluZwpsaXN0ZW5lciA0IGlzIGV4aXRpbmcKbGlzdGVuZXIgMSBpcyBleGl0aW5nCmxpc3RlbmVyIDIgaXMgZXhpdGluZw==",
                                              "duration": 539691375,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nlistener 0 is waiting\nlistener 4 is waiting\nlistener 3 is waiting\nlistener 2 is waiting\nlistener 1 is waiting\nclosing the quit channel\nlistener 0 is exiting\nlistener 3 is exiting\nlistener 4 is exiting\nlistener 1 is exiting\nlistener 2 is exiting",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/quit",
                                            "stdout": "bGlzdGVuZXIgMCBpcyB3YWl0aW5nCmxpc3RlbmVyIDQgaXMgd2FpdGluZwpsaXN0ZW5lciAzIGlzIHdhaXRpbmcKbGlzdGVuZXIgMiBpcyB3YWl0aW5nCmxpc3RlbmVyIDEgaXMgd2FpdGluZwpjbG9zaW5nIHRoZSBxdWl0IGNoYW5uZWwKbGlzdGVuZXIgMCBpcyBleGl0aW5nCmxpc3RlbmVyIDMgaXMgZXhpdGluZwpsaXN0ZW5lciA0IGlzIGV4aXRpbmcKbGlzdGVuZXIgMSBpcyBleGl0aW5nCmxpc3RlbmVyIDIgaXMgZXhpdGluZw==",
                                            "duration": 539691375,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.29:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "text": "main",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": " function.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    null,
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 29,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-29"
                                        },
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-29"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.29",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-29"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " we create a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "chan struct{}",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " named ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ". Then we create a handful of goroutines for the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "listener",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function passing it the loop index and the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "We sleep shortly to allow the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "listener",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " goroutines to start and listen to the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel. Then we close the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "close(quit)",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ". Finally, we sleep again to allow the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "listener",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " goroutines to exit.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "closing.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Detecting Closed Channels On Read",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "When listening to a channel it can often be useful to know if the channel is closed or not. Like we've seen with type assertions and map key assertions, we can use the magic ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "ok",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " value to check if a channel is closed.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-30"
                                        },
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-30"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.30",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-30"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", we ask for, not just the incoming message from the channel, but also the second boolean argument ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "ok",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " which will be ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "true",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " if the channel is open and ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "text": "false",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " if it is closed.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-30",
                                    "type": "listing"
                                  },
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    null,
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/closing/closed-read/main.go#listener"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func listener(ch \u003c-chan int) {\n\n\t// infinite loop to keep listening\n\t// for messages on the channel\n\tfor {\n\n\t\t// store the message from the channel to variable i\n\t\t// capture if the channel is closed or not to variable ok\n\t\ti, ok := \u003c-ch\n\n\t\t// if the channel is closed, return from the function\n\t\tif !ok {\n\t\t\tfmt.Println(\"closed channel\")\n\t\t\treturn\n\t\t}\n\n\t\t// print the message\n\t\tfmt.Printf(\"read %d from channel\\n\", i)\n\t}\n\n}",
                                                "file": "src/closing/closed-read/main.go",
                                                "lang": "go",
                                                "name": "listener",
                                                "start": 8,
                                                "end": 31,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/closing/closed-read"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nread 0 from channel\nread 1 from channel\nread 2 from channel\nread 3 from channel\nread 4 from channel\nclosed channel",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-read",
                                              "stdout": "cmVhZCAwIGZyb20gY2hhbm5lbApyZWFkIDEgZnJvbSBjaGFubmVsCnJlYWQgMiBmcm9tIGNoYW5uZWwKcmVhZCAzIGZyb20gY2hhbm5lbApyZWFkIDQgZnJvbSBjaGFubmVsCmNsb3NlZCBjaGFubmVs",
                                              "duration": 905539750,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nread 0 from channel\nread 1 from channel\nread 2 from channel\nread 3 from channel\nread 4 from channel\nclosed channel",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-read",
                                            "stdout": "cmVhZCAwIGZyb20gY2hhbm5lbApyZWFkIDEgZnJvbSBjaGFubmVsCnJlYWQgMiBmcm9tIGNoYW5uZWwKcmVhZCAzIGZyb20gY2hhbm5lbApyZWFkIDQgZnJvbSBjaGFubmVsCmNsb3NlZCBjaGFubmVs",
                                            "duration": 905539750,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.30:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Reading from a closed channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    null,
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 30,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "closing.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Zero Value on Closed Read",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "When reading from a channel that has been closed, we will get the zero value of the channel's type returned, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-31"
                                        },
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-31"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.31",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-31"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". This is similar to when we ask for a map key that doesn't exist, we get back the zero value of the map's value type.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-31",
                                    "type": "listing"
                                  },
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    null,
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/closing/closed-zero-bad/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\t// make a channel of type User\n\tch := make(chan User)\n\n\t// launch a goroutine to send a User down the channel\n\tgo func() {\n\n\t\t// send a User down the channel\n\t\tch \u003c- User{ID: 1, Name: \"Amy\"}\n\t}()\n\n\t// read the User from the channel\n\tuser := \u003c-ch\n\tfmt.Printf(\"read successful: %+v\\n\", user)\n\n\t// close the channel\n\tclose(ch)\n\n\t// try to read from the channel again\n\tuser = \u003c-ch\n\tfmt.Println(\"attempted read of closed channel\")\n\tfmt.Printf(\"received zero value %s\\n\", user)\n\n}",
                                                "file": "src/closing/closed-zero-bad/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 17,
                                                "end": 43,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/closing/closed-zero-bad"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nread successful: \u0026lt;User: id:\u0026#34;1\u0026#34; name:\u0026#34;Amy\u0026#34;\u0026gt;\nattempted read of closed channel\nreceived zero value \u0026lt;User: id:\u0026#34;0\u0026#34; name:\u0026#34;\u0026#34;\u0026gt;",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-zero-bad",
                                              "stdout": "cmVhZCBzdWNjZXNzZnVsOiA8VXNlcjogaWQ6IjEiIG5hbWU6IkFteSI+CmF0dGVtcHRlZCByZWFkIG9mIGNsb3NlZCBjaGFubmVsCnJlY2VpdmVkIHplcm8gdmFsdWUgPFVzZXI6IGlkOiIwIiBuYW1lOiIiPg==",
                                              "duration": 862862542,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nread successful: \u0026lt;User: id:\u0026#34;1\u0026#34; name:\u0026#34;Amy\u0026#34;\u0026gt;\nattempted read of closed channel\nreceived zero value \u0026lt;User: id:\u0026#34;0\u0026#34; name:\u0026#34;\u0026#34;\u0026gt;",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-zero-bad",
                                            "stdout": "cmVhZCBzdWNjZXNzZnVsOiA8VXNlcjogaWQ6IjEiIG5hbWU6IkFteSI+CmF0dGVtcHRlZCByZWFkIG9mIGNsb3NlZCBjaGFubmVsCnJlY2VpdmVkIHplcm8gdmFsdWUgPFVzZXI6IGlkOiIwIiBuYW1lOiIiPg==",
                                            "duration": 862862542,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.31:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A zero value is returned when reading a closed channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    null,
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 31,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "By checking if the channel is closed or not, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-32"
                                        },
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-32"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.32",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-32"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", we can avoid the zero value and take appropriate action.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-32",
                                    "type": "listing"
                                  },
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    null,
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/closing/closed-zero-good/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// make a channel of type User\n\tch := make(chan User)\n\n\t// launch a goroutine to send a User down the channel\n\tgo func() {\n\n\t\t// send a User down the channel\n\t\tch \u003c- User{ID: 1, Name: \"Amy\"}\n\t}()\n\n\t// read the User from the channel\n\tuser := \u003c-ch\n\tfmt.Printf(\"read successful: %+v\\n\", user)\n\n\t// close the channel\n\tclose(ch)\n\n\t// try to read from the channel again\n\tuser, ok := \u003c-ch\n\n\t// check if the channel is closed\n\tif !ok {\n\t\tfmt.Println(\"attempted read of closed channel\")\n\t\tfmt.Printf(\"received zero value %s\\n\", user)\n\t\treturn\n\t}\n\n\t// the channel is still open, so print the user.\n\tfmt.Printf(\"read successful: %+v\\n\", user)\n}",
                                                "file": "src/closing/closed-zero-good/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 17,
                                                "end": 51,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/closing/closed-zero-good"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nread successful: \u0026lt;User: id:\u0026#34;1\u0026#34; name:\u0026#34;Amy\u0026#34;\u0026gt;\nattempted read of closed channel\nreceived zero value \u0026lt;User: id:\u0026#34;0\u0026#34; name:\u0026#34;\u0026#34;\u0026gt;",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-zero-good",
                                              "stdout": "cmVhZCBzdWNjZXNzZnVsOiA8VXNlcjogaWQ6IjEiIG5hbWU6IkFteSI+CmF0dGVtcHRlZCByZWFkIG9mIGNsb3NlZCBjaGFubmVsCnJlY2VpdmVkIHplcm8gdmFsdWUgPFVzZXI6IGlkOiIwIiBuYW1lOiIiPg==",
                                              "duration": 544407750,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nread successful: \u0026lt;User: id:\u0026#34;1\u0026#34; name:\u0026#34;Amy\u0026#34;\u0026gt;\nattempted read of closed channel\nreceived zero value \u0026lt;User: id:\u0026#34;0\u0026#34; name:\u0026#34;\u0026#34;\u0026gt;",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-zero-good",
                                            "stdout": "cmVhZCBzdWNjZXNzZnVsOiA8VXNlcjogaWQ6IjEiIG5hbWU6IkFteSI+CmF0dGVtcHRlZCByZWFkIG9mIGNsb3NlZCBjaGFubmVsCnJlY2VpdmVkIHplcm8gdmFsdWUgPFVzZXI6IGlkOiIwIiBuYW1lOiIiPg==",
                                            "duration": 544407750,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.32:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A zero value is not returned when reading a closed channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    null,
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 32,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "closing.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Closing an Already Closed Channel",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "Care must be taken when closing a channel. If the channel has already been closed, a panic will be raised and the application will crash, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-33"
                                        },
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-33"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.33",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-33"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-33",
                                    "type": "listing"
                                  },
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    null,
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/closing/close-closed/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// make a new channel\n\tch := make(chan struct{})\n\n\t// close the channel\n\tclose(ch)\n\n\t// try to close the channel again\n\t// this will panic\n\tclose(ch)\n\n}",
                                                "file": "src/closing/close-closed/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 3,
                                                "end": 18,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "exit": "-1",
                                          "run": ".",
                                          "src": "src/closing/close-closed"
                                        },
                                        "expected_exit": -1,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\npanic: close of closed channel\n\ngoroutine 1 [running]:\nmain.main()\n\t./main.go:14 +0x38\nexit status 2",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/close-closed",
                                              "err": {
                                                "Stderr": null
                                              },
                                              "exit": 1,
                                              "stderr": "cGFuaWM6IGNsb3NlIG9mIGNsb3NlZCBjaGFubmVsCgpnb3JvdXRpbmUgMSBbcnVubmluZ106Cm1haW4ubWFpbigpCgkvVXNlcnMvbWFya2JhdGVzL0xpYnJhcnkvQ2xvdWRTdG9yYWdlL0Ryb3Bib3gvZGV2L2d1aWRlcy9jb250ZW50L2Jvb2svY2hhcHRlcnMvMTEtY2hhbm5lbHMvc3JjL2Nsb3NpbmcvY2xvc2UtY2xvc2VkL21haW4uZ286MTQgKzB4MzgKZXhpdCBzdGF0dXMgMg==",
                                              "duration": 603889458,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\npanic: close of closed channel\n\ngoroutine 1 [running]:\nmain.main()\n\t./main.go:14 +0x38\nexit status 2",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/close-closed",
                                            "err": {
                                              "Stderr": null
                                            },
                                            "exit": 1,
                                            "stderr": "cGFuaWM6IGNsb3NlIG9mIGNsb3NlZCBjaGFubmVsCgpnb3JvdXRpbmUgMSBbcnVubmluZ106Cm1haW4ubWFpbigpCgkvVXNlcnMvbWFya2JhdGVzL0xpYnJhcnkvQ2xvdWRTdG9yYWdlL0Ryb3Bib3gvZGV2L2d1aWRlcy9jb250ZW50L2Jvb2svY2hhcHRlcnMvMTEtY2hhbm5lbHMvc3JjL2Nsb3NpbmcvY2xvc2UtY2xvc2VkL21haW4uZ286MTQgKzB4MzgKZXhpdCBzdGF0dXMgMg==",
                                            "duration": 603889458,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.33:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Panicking when closing an already closed channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    null,
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 33,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "Later is this ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "binding",
                                      "attributes": {
                                        "whole": ""
                                      },
                                      "file": "closing.md",
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": ", we will will learn about different synchronization primitives that can be used to help prevent this sort of situation.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "closing.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Writing to a Closed Channel",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "If we attempt to write to a closed channel, as in ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-34"
                                        },
                                        "file": "closing.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-34"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.34",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-34"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", a panic will be raised and the application will crash. Unfortunately, there is no way to check if the channel is closed before writing. With proper synchronization, good architecture, and solid tests, we can prevent this situation.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              null,
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-34",
                                    "type": "listing"
                                  },
                                  "file": "closing.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/closing/closed-write/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// make a new channel\n\tch := make(chan int)\n\n\t// close the channel\n\tclose(ch)\n\n\t// try to write to the closed channel\n\t// this will panic\n\tch \u003c- 1\n\n}",
                                                "file": "src/closing/closed-write/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 3,
                                                "end": 18,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "exit": "-1",
                                          "run": ".",
                                          "src": "src/closing/closed-write"
                                        },
                                        "expected_exit": -1,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\npanic: send on closed channel\n\ngoroutine 1 [running]:\nmain.main()\n\t./main.go:14 +0x40\nexit status 2",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-write",
                                              "err": {
                                                "Stderr": null
                                              },
                                              "exit": 1,
                                              "stderr": "cGFuaWM6IHNlbmQgb24gY2xvc2VkIGNoYW5uZWwKCmdvcm91dGluZSAxIFtydW5uaW5nXToKbWFpbi5tYWluKCkKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvY2xvc2luZy9jbG9zZWQtd3JpdGUvbWFpbi5nbzoxNCArMHg0MApleGl0IHN0YXR1cyAy",
                                              "duration": 204237625,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\npanic: send on closed channel\n\ngoroutine 1 [running]:\nmain.main()\n\t./main.go:14 +0x40\nexit status 2",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/closing/closed-write",
                                            "err": {
                                              "Stderr": null
                                            },
                                            "exit": 1,
                                            "stderr": "cGFuaWM6IHNlbmQgb24gY2xvc2VkIGNoYW5uZWwKCmdvcm91dGluZSAxIFtydW5uaW5nXToKbWFpbi5tYWluKCkKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvY2xvc2luZy9jbG9zZWQtd3JpdGUvbWFpbi5nbzoxNCArMHg0MApleGl0IHN0YXR1cyAy",
                                            "duration": 204237625,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.34:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Panicking when writing to a closed channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 34,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "title": "Closing Channels",
                            "type": "*hype.Page"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "type": "*hype.Include"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "include",
                      "attributes": {
                        "src": "buffered.md"
                      },
                      "dir": ".",
                      "file": "module.md",
                      "nodes": [
                        [
                          {
                            "atom": "page",
                            "file": "buffered.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h1",
                                  "file": "buffered.md",
                                  "level": 1,
                                  "nodes": [
                                    {
                                      "text": "Buffered Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "By default channels are un-buffered. Someone trying to send a message down a channel will block until someone else is ready to receive the message. A buffered channel, however, is a channel that can hold ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "text": "N",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " messages before writing to the channel blocks.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-35",
                                    "type": "listing"
                                  },
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "img",
                                        "attributes": {
                                          "src": "assets/buffered.png"
                                        },
                                        "file": ".",
                                        "type": "*hype.Image"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.35:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Leaving a voicemail is an buffered operation.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 35,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "Consider a phone call that results in a voicemail, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-35"
                                        },
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-35"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.35",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-35"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". This is a buffered operation. The caller is not blocked waiting for the recipient to pick up the phone. The caller can leave a voicemail message and the recipient can retrieve the message later. The size of the buffer is dependent on the number of messages that can be held in memory.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "buffered.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Basic Buffered Channel Example",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "With slices we have seen that you can use the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "builtin#make",
                                          "href": "https://pkg.go.dev/builtin#make",
                                          "target": "_blank"
                                        },
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "buffered.md",
                                            "nodes": [
                                              {
                                                "text": "make",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/builtin#make"
                                      }
                                    ],
                                    {
                                      "text": " function to create a slice of a particular length, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "text": "make([]int, 10)",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " creates a slice of 10 integers.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "To create a buffered channel we use the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "text": "make",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function with a second argument, just like with slices. In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-36"
                                        },
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-36"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.36",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-36"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", we are creating a buffered channel of strings, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "text": "make(chan string, 2)",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-36",
                                    "type": "listing"
                                  },
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/buffered/basic/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// adding a second argument to the make function creates a buffered channel\n\tmessages := make(chan string, 2)\n\n\t// the program is no longer blocked on writing to a channel,\n\t// as it has capacity to write 2 messages to the channel\n\t// before blocking.\n\tmessages \u003c- \"hello!\"\n\tmessages \u003c- \"hello again!\"\n\n\t// reads are no longer blocked as there is already something to read from\n\tfmt.Println(\u003c-messages)\n\tfmt.Println(\u003c-messages)\n}",
                                                "file": "src/buffered/basic/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 5,
                                                "end": 22,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/buffered/basic"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nhello!\nhello again!",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/basic",
                                              "stdout": "aGVsbG8hCmhlbGxvIGFnYWluIQ==",
                                              "duration": 411119583,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nhello!\nhello again!",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/basic",
                                            "stdout": "aGVsbG8hCmhlbGxvIGFnYWluIQ==",
                                            "duration": 411119583,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.36:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A buffered channel example.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 36,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "If we were to try and write a third message into the channel, to ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-36"
                                        },
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-36"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.36",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-36"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", before it has had a chance to be read, the program would block. In this case, because it is impossible for someone to read the message, the application crash with a deadlock, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-37"
                                        },
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-37"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.37",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-37"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-37",
                                    "type": "listing"
                                  },
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/buffered/blocked/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// adding a second argument to the make function creates a buffered channel\n\tmessages := make(chan string, 2)\n\n\t// the program is no longer blocked on writing to a channel,\n\t// as it has capacity to write 2 messages to the channel\n\t// before blocking.\n\tmessages \u003c- \"hello!\"\n\tmessages \u003c- \"hello again!\"\n\n\t// this line will block until someone is ready to read from the channel\n\t// this application will deadlock and crash here.\n\tmessages \u003c- \"hello once more\"\n\n\t// reads are no longer blocked as there is already something to read from\n\tfmt.Println(\u003c-messages)\n\tfmt.Println(\u003c-messages)\n}",
                                                "file": "src/buffered/blocked/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 5,
                                                "end": 26,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "exit": "-1",
                                          "run": ".",
                                          "src": "src/buffered/blocked"
                                        },
                                        "expected_exit": -1,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan send]:\nmain.main()\n\t./main.go:19 +0x58\nexit status 2",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/blocked",
                                              "err": {
                                                "Stderr": null
                                              },
                                              "exit": 1,
                                              "stderr": "ZmF0YWwgZXJyb3I6IGFsbCBnb3JvdXRpbmVzIGFyZSBhc2xlZXAgLSBkZWFkbG9jayEKCmdvcm91dGluZSAxIFtjaGFuIHNlbmRdOgptYWluLm1haW4oKQoJL1VzZXJzL21hcmtiYXRlcy9MaWJyYXJ5L0Nsb3VkU3RvcmFnZS9Ecm9wYm94L2Rldi9ndWlkZXMvY29udGVudC9ib29rL2NoYXB0ZXJzLzExLWNoYW5uZWxzL3NyYy9idWZmZXJlZC9ibG9ja2VkL21haW4uZ286MTkgKzB4NTgKZXhpdCBzdGF0dXMgMg==",
                                              "duration": 740779500,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan send]:\nmain.main()\n\t./main.go:19 +0x58\nexit status 2",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/blocked",
                                            "err": {
                                              "Stderr": null
                                            },
                                            "exit": 1,
                                            "stderr": "ZmF0YWwgZXJyb3I6IGFsbCBnb3JvdXRpbmVzIGFyZSBhc2xlZXAgLSBkZWFkbG9jayEKCmdvcm91dGluZSAxIFtjaGFuIHNlbmRdOgptYWluLm1haW4oKQoJL1VzZXJzL21hcmtiYXRlcy9MaWJyYXJ5L0Nsb3VkU3RvcmFnZS9Ecm9wYm94L2Rldi9ndWlkZXMvY29udGVudC9ib29rL2NoYXB0ZXJzLzExLWNoYW5uZWxzL3NyYy9idWZmZXJlZC9ibG9ja2VkL21haW4uZ286MTkgKzB4NTgKZXhpdCBzdGF0dXMgMg==",
                                            "duration": 740779500,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.37:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A deadlock caused by trying to write to a channel when no one can read from it.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 37,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h3",
                                  "file": "buffered.md",
                                  "level": 3,
                                  "nodes": [
                                    {
                                      "text": "Buffered Channel And Delivery",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "Use buffered channels cautiously. They do not guarantee delivery of the message. It is your responsibility to ensure a channel is drained before exiting a routine.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "Consider ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-38"
                                        },
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-38"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.38",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-38"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The goroutine is able to write two messages into the queue before blocking. The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function blocks and waits for the first message in the channel, and then exits. The second message is never read. In fact, the goroutine has had the opportunity to write one more message into the channel before the program exits.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-38",
                                    "type": "listing"
                                  },
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/buffered/failure/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// make a buffered channel of type strings\n\t// with a buffer size of 2\n\tmessages := make(chan string, 2)\n\n\t// launch a goroutine to send messages\n\t// to the channel\n\tgo func() {\n\n\t\t// try to send 10 messages down the channel\n\t\tfor i := 0; i \u003c 10; i++ {\n\t\t\tmsg := fmt.Sprintf(\"message %d\", i+1)\n\n\t\t\t// send the message down the channel\n\t\t\t// if the channel is full, this will block\n\t\t\t// if not, the message will be buffered\n\t\t\t// in the channel\n\t\t\tmessages \u003c- msg\n\n\t\t\t// log the message was sent down the channel\n\t\t\tfmt.Printf(\"sent: %s\\n\", msg)\n\t\t}\n\n\t}()\n\n\t// listen for the first message in the channel\n\tm := \u003c-messages\n\n\t// log the message received\n\tfmt.Printf(\"received: %s\\n\", m)\n\n\t// exit the program\n}",
                                                "file": "src/buffered/failure/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 7,
                                                "end": 43,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "run": ".",
                                          "src": "src/buffered/failure"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\nsent: message 1\nsent: message 2\nsent: message 3\nreceived: message 1",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/failure",
                                              "stdout": "c2VudDogbWVzc2FnZSAxCnNlbnQ6IG1lc3NhZ2UgMgpzZW50OiBtZXNzYWdlIDMKcmVjZWl2ZWQ6IG1lc3NhZ2UgMQ==",
                                              "duration": 996917958,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\nsent: message 1\nsent: message 2\nsent: message 3\nreceived: message 1",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/failure",
                                            "stdout": "c2VudDogbWVzc2FnZSAxCnNlbnQ6IG1lc3NhZ2UgMgpzZW50OiBtZXNzYWdlIDMKcmVjZWl2ZWQ6IG1lc3NhZ2UgMQ==",
                                            "duration": 996917958,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.38:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "A failure to drain a buffered channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 38,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "buffered.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Reading From Closed Buffered Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "If a buffered channel is closed, but still has messages in it, those messages can still be read from the channel until it is empty, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-39"
                                        },
                                        "file": "buffered.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-39"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.39",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-39"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". We can't, however, continue to write to the closed channel.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-39",
                                    "type": "listing"
                                  },
                                  "file": "buffered.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/buffered/read-closed/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\t// make a buffered channel of ints\n\t// that can hold 5 values before blocking\n\tch := make(chan int, 5)\n\n\t// write messages to the channel\n\tfor i := 0; i \u003c 5; i++ {\n\t\tch \u003c- i\n\t}\n\n\t// close the channel\n\tclose(ch)\n\n\t// we can continue to read messages\n\t// from the closed channel until it is empty.\n\t// when it is empty the for loop will exit.\n\tfor i := range ch {\n\t\tfmt.Println(i)\n\t}\n\n\t// trying to write to the closed channel\n\t// will cause a panic and the program will crash.\n\tch \u003c- 42\n}",
                                                "file": "src/buffered/read-closed/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 7,
                                                "end": 33,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "atom": "hr",
                                      "file": ".",
                                      "type": "*hype.Element"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "run",
                                          "."
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "exec": "go run .",
                                          "exit": "-1",
                                          "run": ".",
                                          "src": "src/buffered/read-closed"
                                        },
                                        "expected_exit": -1,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go run .\n\n0\n1\n2\n3\n4\n\npanic: send on closed channel\n\ngoroutine 1 [running]:\nmain.main()\n\t./main.go:30 +0xc4\nexit status 2",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "run",
                                                "."
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/read-closed",
                                              "err": {
                                                "Stderr": null
                                              },
                                              "exit": 1,
                                              "stderr": "cGFuaWM6IHNlbmQgb24gY2xvc2VkIGNoYW5uZWwKCmdvcm91dGluZSAxIFtydW5uaW5nXToKbWFpbi5tYWluKCkKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvYnVmZmVyZWQvcmVhZC1jbG9zZWQvbWFpbi5nbzozMCArMHhjNApleGl0IHN0YXR1cyAy",
                                              "stdout": "MAoxCjIKMwo0",
                                              "duration": 672902583,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go run .\n\n0\n1\n2\n3\n4\n\npanic: send on closed channel\n\ngoroutine 1 [running]:\nmain.main()\n\t./main.go:30 +0xc4\nexit status 2",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "run",
                                              "."
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels/src/buffered/read-closed",
                                            "err": {
                                              "Stderr": null
                                            },
                                            "exit": 1,
                                            "stderr": "cGFuaWM6IHNlbmQgb24gY2xvc2VkIGNoYW5uZWwKCmdvcm91dGluZSAxIFtydW5uaW5nXToKbWFpbi5tYWluKCkKCS9Vc2Vycy9tYXJrYmF0ZXMvTGlicmFyeS9DbG91ZFN0b3JhZ2UvRHJvcGJveC9kZXYvZ3VpZGVzL2NvbnRlbnQvYm9vay9jaGFwdGVycy8xMS1jaGFubmVscy9zcmMvYnVmZmVyZWQvcmVhZC1jbG9zZWQvbWFpbi5nbzozMCArMHhjNApleGl0IHN0YXR1cyAy",
                                            "stdout": "MAoxCjIKMwo0",
                                            "duration": 672902583,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.39:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Reading from a closed buffered channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 39,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "title": "Buffered Channels",
                            "type": "*hype.Page"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "type": "*hype.Include"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "include",
                      "attributes": {
                        "src": "signals.md"
                      },
                      "dir": ".",
                      "file": "module.md",
                      "nodes": [
                        [
                          {
                            "atom": "page",
                            "file": "signals.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h1",
                                  "file": "signals.md",
                                  "level": 1,
                                  "nodes": [
                                    {
                                      "text": "Capturing System Signals with Channels",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "All programs should attempt a graceful shutdown. This means that, instead of crashing, or exiting an application, before resources are released, the application, should, instead, wait for the resources to be released. ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-40"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-40"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.40",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-40"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " covers the rules for graceful shutdown.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-40",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "h3",
                                        "file": ".",
                                        "level": 3,
                                        "nodes": [
                                          {
                                            "text": "Rules for Graceful Shutdown",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "hype.Heading"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ul",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "Detecting that the program was requested to shut down",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "Shut down all internal processes, including long running go routines",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "Have a reasonable timeout in the event that internal processes are taking to long to shut down or are deadlocked",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "Respond to an actual user request for immediate hard shutdown",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "li",
                                              "file": ".",
                                              "list-type": "ul",
                                              "nodes": [
                                                {
                                                  "text": "Record the result of the shutdown (success, timeout, user intervention)",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.LI"
                                            }
                                          ],
                                          {
                                            "text": "\n",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.UL"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.40:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Rules for graceful shutdown.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 40,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "signals.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "The \"os/signals\" Package",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "Using channels, and the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "os/signal",
                                          "href": "https://pkg.go.dev/os/signal",
                                          "target": "_blank"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "signals.md",
                                            "nodes": [
                                              {
                                                "text": "os/signal",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/os/signal"
                                      }
                                    ],
                                    {
                                      "text": " package, you, can capture system signals and respond accordingly. The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "os/signal#Notify",
                                          "href": "https://pkg.go.dev/os/signal#Notify",
                                          "target": "_blank"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "signals.md",
                                            "nodes": [
                                              {
                                                "text": "signal.Notify",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/os/signal#Notify"
                                      }
                                    ],
                                    {
                                      "text": " function, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-41"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-41"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.41",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-41"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", allows you to register a channel to receive notifications of ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "os#Signal",
                                          "href": "https://pkg.go.dev/os#Signal",
                                          "target": "_blank"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "signals.md",
                                            "nodes": [
                                              {
                                                "text": "os.Signal",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/os#Signal"
                                      }
                                    ],
                                    {
                                      "text": ", ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-42"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-42"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.42",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-42"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-41",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "doc",
                                          "os/signal.Notify"
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "doc": "os/signal.Notify",
                                          "exec": "go doc os/signal.Notify"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go doc os/signal.Notify\n\npackage signal // import \u0026#34;os/signal\u0026#34;\n\nfunc Notify(c chan\u0026lt;- os.Signal, sig ...os.Signal)\n    Notify causes package signal to relay incoming signals to c. If no signals\n    are provided, all incoming signals will be relayed to c. Otherwise, just the\n    provided signals will.\n\n    Package signal will not block sending to c: the caller must ensure that\n    c has sufficient buffer space to keep up with the expected signal rate.\n    For a channel used for notification of just one signal value, a buffer of\n    size 1 is sufficient.\n\n    It is allowed to call Notify multiple times with the same channel: each call\n    expands the set of signals sent to that channel. The only way to remove\n    signals from the set is to call Stop.\n\n    It is allowed to call Notify multiple times with different channels\n    and the same signals: each channel receives copies of incoming signals\n    independently.",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "doc",
                                                "os/signal.Notify"
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                              "stdout": "cGFja2FnZSBzaWduYWwgLy8gaW1wb3J0ICJvcy9zaWduYWwiCgpmdW5jIE5vdGlmeShjIGNoYW48LSBvcy5TaWduYWwsIHNpZyAuLi5vcy5TaWduYWwpCiAgICBOb3RpZnkgY2F1c2VzIHBhY2thZ2Ugc2lnbmFsIHRvIHJlbGF5IGluY29taW5nIHNpZ25hbHMgdG8gYy4gSWYgbm8gc2lnbmFscwogICAgYXJlIHByb3ZpZGVkLCBhbGwgaW5jb21pbmcgc2lnbmFscyB3aWxsIGJlIHJlbGF5ZWQgdG8gYy4gT3RoZXJ3aXNlLCBqdXN0IHRoZQogICAgcHJvdmlkZWQgc2lnbmFscyB3aWxsLgoKICAgIFBhY2thZ2Ugc2lnbmFsIHdpbGwgbm90IGJsb2NrIHNlbmRpbmcgdG8gYzogdGhlIGNhbGxlciBtdXN0IGVuc3VyZSB0aGF0CiAgICBjIGhhcyBzdWZmaWNpZW50IGJ1ZmZlciBzcGFjZSB0byBrZWVwIHVwIHdpdGggdGhlIGV4cGVjdGVkIHNpZ25hbCByYXRlLgogICAgRm9yIGEgY2hhbm5lbCB1c2VkIGZvciBub3RpZmljYXRpb24gb2YganVzdCBvbmUgc2lnbmFsIHZhbHVlLCBhIGJ1ZmZlciBvZgogICAgc2l6ZSAxIGlzIHN1ZmZpY2llbnQuCgogICAgSXQgaXMgYWxsb3dlZCB0byBjYWxsIE5vdGlmeSBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZSBzYW1lIGNoYW5uZWw6IGVhY2ggY2FsbAogICAgZXhwYW5kcyB0aGUgc2V0IG9mIHNpZ25hbHMgc2VudCB0byB0aGF0IGNoYW5uZWwuIFRoZSBvbmx5IHdheSB0byByZW1vdmUKICAgIHNpZ25hbHMgZnJvbSB0aGUgc2V0IGlzIHRvIGNhbGwgU3RvcC4KCiAgICBJdCBpcyBhbGxvd2VkIHRvIGNhbGwgTm90aWZ5IG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IGNoYW5uZWxzCiAgICBhbmQgdGhlIHNhbWUgc2lnbmFsczogZWFjaCBjaGFubmVsIHJlY2VpdmVzIGNvcGllcyBvZiBpbmNvbWluZyBzaWduYWxzCiAgICBpbmRlcGVuZGVudGx5Lg==",
                                              "duration": 303499875,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go doc os/signal.Notify\n\npackage signal // import \u0026#34;os/signal\u0026#34;\n\nfunc Notify(c chan\u0026lt;- os.Signal, sig ...os.Signal)\n    Notify causes package signal to relay incoming signals to c. If no signals\n    are provided, all incoming signals will be relayed to c. Otherwise, just the\n    provided signals will.\n\n    Package signal will not block sending to c: the caller must ensure that\n    c has sufficient buffer space to keep up with the expected signal rate.\n    For a channel used for notification of just one signal value, a buffer of\n    size 1 is sufficient.\n\n    It is allowed to call Notify multiple times with the same channel: each call\n    expands the set of signals sent to that channel. The only way to remove\n    signals from the set is to call Stop.\n\n    It is allowed to call Notify multiple times with different channels\n    and the same signals: each channel receives copies of incoming signals\n    independently.",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "doc",
                                              "os/signal.Notify"
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                            "stdout": "cGFja2FnZSBzaWduYWwgLy8gaW1wb3J0ICJvcy9zaWduYWwiCgpmdW5jIE5vdGlmeShjIGNoYW48LSBvcy5TaWduYWwsIHNpZyAuLi5vcy5TaWduYWwpCiAgICBOb3RpZnkgY2F1c2VzIHBhY2thZ2Ugc2lnbmFsIHRvIHJlbGF5IGluY29taW5nIHNpZ25hbHMgdG8gYy4gSWYgbm8gc2lnbmFscwogICAgYXJlIHByb3ZpZGVkLCBhbGwgaW5jb21pbmcgc2lnbmFscyB3aWxsIGJlIHJlbGF5ZWQgdG8gYy4gT3RoZXJ3aXNlLCBqdXN0IHRoZQogICAgcHJvdmlkZWQgc2lnbmFscyB3aWxsLgoKICAgIFBhY2thZ2Ugc2lnbmFsIHdpbGwgbm90IGJsb2NrIHNlbmRpbmcgdG8gYzogdGhlIGNhbGxlciBtdXN0IGVuc3VyZSB0aGF0CiAgICBjIGhhcyBzdWZmaWNpZW50IGJ1ZmZlciBzcGFjZSB0byBrZWVwIHVwIHdpdGggdGhlIGV4cGVjdGVkIHNpZ25hbCByYXRlLgogICAgRm9yIGEgY2hhbm5lbCB1c2VkIGZvciBub3RpZmljYXRpb24gb2YganVzdCBvbmUgc2lnbmFsIHZhbHVlLCBhIGJ1ZmZlciBvZgogICAgc2l6ZSAxIGlzIHN1ZmZpY2llbnQuCgogICAgSXQgaXMgYWxsb3dlZCB0byBjYWxsIE5vdGlmeSBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZSBzYW1lIGNoYW5uZWw6IGVhY2ggY2FsbAogICAgZXhwYW5kcyB0aGUgc2V0IG9mIHNpZ25hbHMgc2VudCB0byB0aGF0IGNoYW5uZWwuIFRoZSBvbmx5IHdheSB0byByZW1vdmUKICAgIHNpZ25hbHMgZnJvbSB0aGUgc2V0IGlzIHRvIGNhbGwgU3RvcC4KCiAgICBJdCBpcyBhbGxvd2VkIHRvIGNhbGwgTm90aWZ5IG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IGNoYW5uZWxzCiAgICBhbmQgdGhlIHNhbWUgc2lnbmFsczogZWFjaCBjaGFubmVsIHJlY2VpdmVzIGNvcGllcyBvZiBpbmNvbWluZyBzaWduYWxzCiAgICBpbmRlcGVuZGVudGx5Lg==",
                                            "duration": 303499875,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.41:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "a",
                                              "attributes": {
                                                "for": "os/signal#Notify",
                                                "href": "https://pkg.go.dev/os/signal#Notify",
                                                "target": "_blank"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                [
                                                  {
                                                    "atom": "code",
                                                    "file": ".",
                                                    "nodes": [
                                                      {
                                                        "text": "signal.Notify",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.InlineCode"
                                                  }
                                                ]
                                              ],
                                              "type": "*hype.Link",
                                              "url": "https://pkg.go.dev/os/signal#Notify"
                                            }
                                          ],
                                          {
                                            "text": " function.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 41,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-42",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "args": [
                                          "go",
                                          "doc",
                                          "os.Signal"
                                        ],
                                        "atom": "cmd",
                                        "attributes": {
                                          "data-go-version": "go1.21.5",
                                          "doc": "os.Signal",
                                          "exec": "go doc os.Signal"
                                        },
                                        "expected_exit": 0,
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "result",
                                            "nodes": [
                                              {
                                                "atom": "pre",
                                                "nodes": [
                                                  {
                                                    "atom": "code",
                                                    "attributes": {
                                                      "class": "language-shell",
                                                      "language": "shell"
                                                    },
                                                    "lang": "shell",
                                                    "nodes": [
                                                      {
                                                        "text": "$ go doc os.Signal\n\npackage os // import \u0026#34;os\u0026#34;\n\ntype Signal interface {\n\tString() string\n\tSignal() // to distinguish from other Stringers\n}\n    A Signal represents an operating system signal. The usual underlying\n    implementation is operating system-dependent: on Unix it is syscall.Signal.\n\nvar Interrupt Signal = syscall.SIGINT ...",
                                                        "type": "hype.Text"
                                                      },
                                                      {
                                                        "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.FencedCode"
                                                  }
                                                ],
                                                "type": "*hype.Element"
                                              }
                                            ],
                                            "result": {
                                              "args": [
                                                "go",
                                                "doc",
                                                "os.Signal"
                                              ],
                                              "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                              "stdout": "cGFja2FnZSBvcyAvLyBpbXBvcnQgIm9zIgoKdHlwZSBTaWduYWwgaW50ZXJmYWNlIHsKCVN0cmluZygpIHN0cmluZwoJU2lnbmFsKCkgLy8gdG8gZGlzdGluZ3Vpc2ggZnJvbSBvdGhlciBTdHJpbmdlcnMKfQogICAgQSBTaWduYWwgcmVwcmVzZW50cyBhbiBvcGVyYXRpbmcgc3lzdGVtIHNpZ25hbC4gVGhlIHVzdWFsIHVuZGVybHlpbmcKICAgIGltcGxlbWVudGF0aW9uIGlzIG9wZXJhdGluZyBzeXN0ZW0tZGVwZW5kZW50OiBvbiBVbml4IGl0IGlzIHN5c2NhbGwuU2lnbmFsLgoKdmFyIEludGVycnVwdCBTaWduYWwgPSBzeXNjYWxsLlNJR0lOVCAuLi4=",
                                              "duration": 263467500,
                                              "type": "*clam.Result"
                                            },
                                            "type": "*hype.CmdResult"
                                          }
                                        ],
                                        "result": {
                                          "atom": "result",
                                          "nodes": [
                                            {
                                              "atom": "pre",
                                              "nodes": [
                                                {
                                                  "atom": "code",
                                                  "attributes": {
                                                    "class": "language-shell",
                                                    "language": "shell"
                                                  },
                                                  "lang": "shell",
                                                  "nodes": [
                                                    {
                                                      "text": "$ go doc os.Signal\n\npackage os // import \u0026#34;os\u0026#34;\n\ntype Signal interface {\n\tString() string\n\tSignal() // to distinguish from other Stringers\n}\n    A Signal represents an operating system signal. The usual underlying\n    implementation is operating system-dependent: on Unix it is syscall.Signal.\n\nvar Interrupt Signal = syscall.SIGINT ...",
                                                      "type": "hype.Text"
                                                    },
                                                    {
                                                      "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.FencedCode"
                                                }
                                              ],
                                              "type": "*hype.Element"
                                            }
                                          ],
                                          "result": {
                                            "args": [
                                              "go",
                                              "doc",
                                              "os.Signal"
                                            ],
                                            "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/hypeviewer",
                                            "stdout": "cGFja2FnZSBvcyAvLyBpbXBvcnQgIm9zIgoKdHlwZSBTaWduYWwgaW50ZXJmYWNlIHsKCVN0cmluZygpIHN0cmluZwoJU2lnbmFsKCkgLy8gdG8gZGlzdGluZ3Vpc2ggZnJvbSBvdGhlciBTdHJpbmdlcnMKfQogICAgQSBTaWduYWwgcmVwcmVzZW50cyBhbiBvcGVyYXRpbmcgc3lzdGVtIHNpZ25hbC4gVGhlIHVzdWFsIHVuZGVybHlpbmcKICAgIGltcGxlbWVudGF0aW9uIGlzIG9wZXJhdGluZyBzeXN0ZW0tZGVwZW5kZW50OiBvbiBVbml4IGl0IGlzIHN5c2NhbGwuU2lnbmFsLgoKdmFyIEludGVycnVwdCBTaWduYWwgPSBzeXNjYWxsLlNJR0lOVCAuLi4=",
                                            "duration": 263467500,
                                            "type": "*clam.Result"
                                          },
                                          "type": "*hype.CmdResult"
                                        },
                                        "timeout": "30s",
                                        "type": "*hype.Cmd"
                                      }
                                    ],
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.42:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "a",
                                              "attributes": {
                                                "for": "os#Signal",
                                                "href": "https://pkg.go.dev/os#Signal",
                                                "target": "_blank"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                [
                                                  {
                                                    "atom": "code",
                                                    "file": ".",
                                                    "nodes": [
                                                      {
                                                        "text": "os.Signal",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.InlineCode"
                                                  }
                                                ]
                                              ],
                                              "type": "*hype.Link",
                                              "url": "https://pkg.go.dev/os#Signal"
                                            }
                                          ],
                                          {
                                            "text": " type.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 42,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-43"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-43"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.43",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-43"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", we register a channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "ch",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ", to listen for ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "os#Interrupt",
                                          "href": "https://pkg.go.dev/os#Interrupt",
                                          "target": "_blank"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "signals.md",
                                            "nodes": [
                                              {
                                                "text": "os.Interrupt",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/os#Interrupt"
                                      }
                                    ],
                                    {
                                      "text": " with ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "signal#Notify",
                                          "href": "https://pkg.go.dev/signal#Notify",
                                          "target": "_blank"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "file": "signals.md",
                                            "nodes": [
                                              {
                                                "text": "signal.Notify",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.InlineCode"
                                          }
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/signal#Notify"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-43",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/signal/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// set up channel on which to send signal notifications.\n\t// we must use a buffered channel or risk missing the signal\n\t// if we're not ready to receive when the signal is sent.\n\tch := make(chan os.Signal, 1)\n\n\t// wire up the channel to an `os.Signal`\n\t// this tells the signal package to send\n\t// the specified signals to our channel\n\t// this is not a blocking operation\n\tsignal.Notify(ch, os.Interrupt)\n\n\tfmt.Println(\"awaiting signal...\")\n\n\t// block until a signal is received.\n\ts := \u003c-ch\n\n\tfmt.Println(\"Got signal:\", s)\n\n\t// perform final shutdown operations\n\t// then exit the program\n}",
                                                "file": "src/signals/signal/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 9,
                                                "end": 34,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.43:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Listening for ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "a",
                                              "attributes": {
                                                "for": "os#Interrupt",
                                                "href": "https://pkg.go.dev/os#Interrupt",
                                                "target": "_blank"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                [
                                                  {
                                                    "atom": "code",
                                                    "file": ".",
                                                    "nodes": [
                                                      {
                                                        "text": "os.Interrupt",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.InlineCode"
                                                  }
                                                ]
                                              ],
                                              "type": "*hype.Link",
                                              "url": "https://pkg.go.dev/os#Interrupt"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 43,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "signals.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Implementing Graceful Shutdown",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "Consider ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-44"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-44"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.44",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-44"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". It creates a new ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " and starts the monitor in a goroutine giving it a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel to listen for shutdown. The application runs for a bit and then closes the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-44",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/start/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\t// create a new quit channel\n\tquit := make(chan struct{})\n\n\t// create a new monitor\n\tmon := Monitor{}\n\n\t// launch the monitor in a goroutine\n\tgo mon.Start(quit)\n\n\t// sleep for a while to let the monitor run\n\ttime.Sleep(50 * time.Millisecond)\n\n\t// close the quit channel to stop the monitor\n\t// and exit the program\n\tclose(quit)\n}",
                                                "file": "src/signals/shutdown/start/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 36,
                                                "end": 55,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.44:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "An application without graceful shutdown.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 44,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ", ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-45"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-45"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.45",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-45"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " listens to both the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel and a ticker channel that will send the time down the channel at the set interval. If a tick is received a message is printed and the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "for",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " loop and ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement go back to listens to the two channels. If the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel is closed the function will return.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-45",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/start/main.go#monitor"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "type Monitor struct{}\n\nfunc (m Monitor) Start(quit chan struct{}) {\n\n\t// create a new ticker channel to listen to\n\ttick := time.NewTicker(10 * time.Millisecond)\n\tdefer tick.Stop()\n\n\t// use an infinite loop to continue to listen\n\t// to new messages after the select statement\n\t// has been executed\n\tfor {\n\n\t\tselect {\n\t\tcase \u003c-quit: // shut down if the quit channel is closed\n\t\t\tfmt.Println(\"shutting down monitor\")\n\t\t\treturn\n\t\tcase \u003c-tick.C: // listen to the ticker channel\n\t\t\tfmt.Println(\"monitor check\")\n\t\t}\n\n\t}\n\n}",
                                                "file": "src/signals/shutdown/start/main.go",
                                                "lang": "go",
                                                "name": "monitor",
                                                "start": 8,
                                                "end": 34,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.45:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Listening to multiple channels with a select statement.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 45,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "If we were to interrupt this program, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-46"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-46"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.46",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-46"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " we would see that the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " was never shutdown properly.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-46",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/start/main.go#output"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "monitor check\nmonitor check\nmonitor check\nmonitor check\nmonitor check\nmonitor check\n^Csignal: interrupt",
                                                "file": "src/signals/shutdown/start/main.go",
                                                "lang": "go",
                                                "name": "output",
                                                "start": 58,
                                                "end": 66,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.46:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Output from interrupting ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "ref",
                                              "attributes": {
                                                "id": "listing-1-44"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "atom": "a",
                                                  "attributes": {
                                                    "href": "#listing-1-44"
                                                  },
                                                  "nodes": [
                                                    {
                                                      "text": "Listing 1.44",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.Link",
                                                  "url": "#listing-1-44"
                                                }
                                              ],
                                              "type": "*hype.Ref"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 46,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "signals.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Listening for System Signals",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "The first step in implementing graceful shutdown is to listen for system signals. We can update the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function to listen for the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Interrupt",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " signal on a new channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "sig",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ". Finally, instead of the application sleeping for a while we can listen for the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Interrupt",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " signal on the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "sig",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel and respond accordingly.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-47",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/signal/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// create a new channel to listen to\n\t// system signals\n\tsig := make(chan os.Signal, 1)\n\n\t// register the channel to be notified\n\t// on os.Interrupt signals\n\tsignal.Notify(sig, os.Interrupt)\n\n\t// create a new quit channel\n\tquit := make(chan struct{})\n\n\t// create a new monitor\n\tmon := Monitor{}\n\n\t// launch the monitor in a goroutine\n\tgo mon.Start(quit)\n\n\t// block until the os.Interrupt signal is\n\t// is received (ctrl-c)\n\t\u003c-sig\n\n\t// close the quit channel to stop the monitor\n\t// and exit the program\n\tclose(quit)\n}",
                                                "file": "src/signals/shutdown/signal/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 41,
                                                "end": 70,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.47:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Listening for ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "a",
                                              "attributes": {
                                                "for": "os#Interrupt",
                                                "href": "https://pkg.go.dev/os#Interrupt",
                                                "target": "_blank"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                [
                                                  {
                                                    "atom": "code",
                                                    "file": ".",
                                                    "nodes": [
                                                      {
                                                        "text": "os.Interrupt",
                                                        "type": "hype.Text"
                                                      }
                                                    ],
                                                    "type": "*hype.InlineCode"
                                                  }
                                                ]
                                              ],
                                              "type": "*hype.Link",
                                              "url": "https://pkg.go.dev/os#Interrupt"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 47,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "From the output in ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-48"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-48"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.48",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-48"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", we can see that the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " was still not properly shutdown.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-48",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/signal/main.go#output"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "monitor check\nmonitor check\nmonitor check\nmonitor check\n^Cmonitor check",
                                                "file": "src/signals/shutdown/signal/main.go",
                                                "lang": "go",
                                                "name": "output",
                                                "start": 73,
                                                "end": 79,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.48:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Output from interrupting ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "ref",
                                              "attributes": {
                                                "id": "listing-1-47"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "atom": "a",
                                                  "attributes": {
                                                    "href": "#listing-1-47"
                                                  },
                                                  "nodes": [
                                                    {
                                                      "text": "Listing 1.47",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.Link",
                                                  "url": "#listing-1-47"
                                                }
                                              ],
                                              "type": "*hype.Ref"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 48,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "The reason that the monitor was not shutdown properly is because we didn't give the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " goroutine enough time to shut down gracefully.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "signals.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Listening for Shutdown Confirmation",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "In order to ensure that the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " was shutdown properly, it has to provide the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function with a way of receiving confirmation that the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " was shutdown.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "Let's update the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " to have an internal ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "done chan struct{}",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-49"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-49"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.49",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-49"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ". The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " also exposes a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Done",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " method that returns a read-only channel that will be closed when the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " has properly shutdown.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-49",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/fixed/main.go#monitor"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "type Monitor struct {\n\tdone chan struct{}\n}\n\nfunc (m Monitor) Done() \u003c-chan struct{} {\n\treturn m.done\n}",
                                                "file": "src/signals/shutdown/fixed/main.go",
                                                "lang": "go",
                                                "name": "monitor",
                                                "start": 10,
                                                "end": 19,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.49:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "The ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "text": "Monitor",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": " with the ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "code",
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "text": "done",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ],
                                          {
                                            "text": " channel.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 49,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "In the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-50"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-50"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.50",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-50"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " after we close the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "quit",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "close(quit)",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ", we can block and wait for the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "\u0026lt;-mon.Done()",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel to be closed. This will happen when the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " has properly shutdown.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-50",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/fixed/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// create a new channel to listen to\n\t// system signals\n\tsig := make(chan os.Signal, 1)\n\n\t// register the channel to be notified\n\t// on os.Interrupt signals\n\tsignal.Notify(sig, os.Interrupt)\n\n\t// create a new quit channel\n\tquit := make(chan struct{})\n\n\t// create a new monitor\n\tmon := Monitor{\n\t\tdone: make(chan struct{}),\n\t}\n\n\t// launch the monitor in a goroutine\n\tgo mon.Start(quit)\n\n\t// block until the os.Interrupt signal is\n\t// is received (ctrl-c)\n\t\u003c-sig\n\n\t// close the quit channel to stop the monitor\n\t// and exit the program\n\tclose(quit)\n\n\t// wait for the monitor to shut down\n\t\u003c-mon.Done()\n\n}",
                                                "file": "src/signals/shutdown/fixed/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 52,
                                                "end": 87,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.50:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Listening for shutdown confirmation.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 50,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "Now, when we look at the output, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-51"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-51"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.51",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-51"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " we can see that the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " was shutdown properly and the application shutdown gracefully.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-51",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/fixed/main.go#output"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "monitor check\nmonitor check\nmonitor check\nmonitor check\n^Cshutting down monitor",
                                                "file": "src/signals/shutdown/fixed/main.go",
                                                "lang": "go",
                                                "name": "output",
                                                "start": 90,
                                                "end": 96,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.51:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Output from interrupting ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "ref",
                                              "attributes": {
                                                "id": "listing-1-50"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "atom": "a",
                                                  "attributes": {
                                                    "href": "#listing-1-50"
                                                  },
                                                  "nodes": [
                                                    {
                                                      "text": "Listing 1.50",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.Link",
                                                  "url": "#listing-1-50"
                                                }
                                              ],
                                              "type": "*hype.Ref"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 51,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "h2",
                                  "file": "signals.md",
                                  "level": 2,
                                  "nodes": [
                                    {
                                      "text": "Timing Out a Non-Responsive Shutdown",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "hype.Heading"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "Occasionally, the resources you are waiting on to shutdown properly fail to respond and cause the application to hang indefinitely. The user is then required to manually force the application to stop.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "In order to prevent this from happening, we can use a timeout.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "In ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-52"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-52"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.52",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-52"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ", we update the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function to no longer wait for the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "\u0026lt;-mon.Done()",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel to be closed before exiting. Now, the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "main",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " uses a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "select",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " statement to listen for the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "\u0026lt;-mon.Done()",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel and a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "\u0026lt;-time.After(timeout)",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel. If the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "\u0026lt;-mon.Done()",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " channel is closed before the timeout, the application will gracefully shutdown.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-52",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/timeout/main.go#main"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "func main() {\n\n\t// create a new channel to listen to\n\t// system signals\n\tsig := make(chan os.Signal, 1)\n\n\t// register the channel to be notified\n\t// on os.Interrupt signals\n\tsignal.Notify(sig, os.Interrupt)\n\n\t// create a new quit channel\n\tquit := make(chan struct{})\n\n\t// create a new monitor\n\tmon := Monitor{\n\t\tdone: make(chan struct{}),\n\t}\n\n\t// launch the monitor in a goroutine\n\tgo mon.Start(quit)\n\n\t// block until the os.Interrupt signal is\n\t// is received (ctrl-c)\n\t\u003c-sig\n\n\t// close the quit channel to stop the monitor\n\t// and exit the program\n\tclose(quit)\n\n\tselect {\n\tcase \u003c-mon.Done(): // wait for the monitor to shut down\n\t\t// success shutdown\n\t\tos.Exit(0)\n\tcase \u003c-time.After(500 * time.Millisecond): // timeout after 500ms\n\t\tfmt.Println(\"timed out while trying to shut down the monitor\")\n\n\t\t// non-successful shutdown\n\t\tos.Exit(1)\n\t}\n}",
                                                "file": "src/signals/shutdown/timeout/main.go",
                                                "lang": "go",
                                                "name": "main",
                                                "start": 55,
                                                "end": 97,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.52:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Listening for shutdown confirmation.",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 52,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "p",
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "As we can see from the output, ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-53"
                                        },
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-53"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.53",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-53"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": " if the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "file": "signals.md",
                                        "nodes": [
                                          {
                                            "text": "Monitor",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " does not shutdown within the specified timeout period, the application will exit with an error.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Paragraph"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figure",
                                  "attributes": {
                                    "id": "listing-1-53",
                                    "type": "listing"
                                  },
                                  "file": "signals.md",
                                  "nodes": [
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "atom": "pre",
                                      "file": ".",
                                      "nodes": [
                                        [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go",
                                              "src": "src/signals/shutdown/timeout/main.go#output"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "content": "monitor check\nmonitor check\nmonitor check\nmonitor check\nmonitor check\n^Cshutting down monitor\ntimed out while trying to shut down the monitor\nexit status 1",
                                                "file": "src/signals/shutdown/timeout/main.go",
                                                "lang": "go",
                                                "name": "output",
                                                "start": 100,
                                                "end": 109,
                                                "type": "hype.Snippet"
                                              }
                                            ],
                                            "type": "*hype.SourceCode"
                                          }
                                        ]
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": "\n\n",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "figcaption",
                                        "file": ".",
                                        "nodes": [
                                          {
                                            "atom": "em",
                                            "attributes": {
                                              "class": "figure-name"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.53:",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Element"
                                          },
                                          {
                                            "text": " ",
                                            "type": "hype.Text"
                                          },
                                          {
                                            "text": "Output from interrupting ",
                                            "type": "hype.Text"
                                          },
                                          [
                                            {
                                              "atom": "ref",
                                              "attributes": {
                                                "id": "listing-1-52"
                                              },
                                              "file": ".",
                                              "nodes": [
                                                {
                                                  "atom": "a",
                                                  "attributes": {
                                                    "href": "#listing-1-52"
                                                  },
                                                  "nodes": [
                                                    {
                                                      "text": "Listing 1.52",
                                                      "type": "hype.Text"
                                                    }
                                                  ],
                                                  "type": "*hype.Link",
                                                  "url": "#listing-1-52"
                                                }
                                              ],
                                              "type": "*hype.Ref"
                                            }
                                          ],
                                          {
                                            "text": ".",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.Figcaption"
                                      }
                                    ],
                                    {
                                      "text": "\n",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "pos": 53,
                                  "section_id": 1,
                                  "style": "listing",
                                  "type": "*hype.Figure"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "title": "Capturing System Signals with Channels",
                            "type": "*hype.Page"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "type": "*hype.Include"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "page",
                      "file": "module.md",
                      "nodes": [
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h1",
                            "file": "module.md",
                            "level": 1,
                            "nodes": [
                              {
                                "text": "Summary",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In this ",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "binding",
                                "attributes": {
                                  "part": ""
                                },
                                "file": "module.md",
                                "type": "*hype.Element"
                              },
                              {
                                "text": " we started to explore concurrency in Go with Channels. We learned the differences between parallelism and concurrency, and how to use goroutines and channels to achieve concurrency. We learned about channels and how they can be used to communicate between, and control, goroutines. We learned the differences between buffered and un-buffered channels, and when each one will block and unblock. Finally, we learned how we can use channels to listen for system signals so we can gracefully shutdown our applications.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "title": "Summary",
                      "type": "*hype.Page"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  }
                ],
                "type": "*hype.Body"
              }
            ]
          ],
          "type": "*hype.Element"
        }
      ],
      "type": "*hype.Element"
    }
  ],
  "parser": {
    "type": "*hype.Parser",
    "root": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels",
    "section": 1,
    "snippets": {}
  },
  "root": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/11-channels",
  "section_id": 1,
  "snippets": {},
  "title": "Channels",
  "type": "*hype.Document"
}
