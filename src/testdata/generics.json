{
  "nodes": [
    {
      "file": "module.md",
      "nodes": [
        {
          "atom": "html",
          "file": "module.md",
          "nodes": [
            {
              "atom": "head",
              "file": "module.md",
              "type": "*hype.Element"
            },
            [
              {
                "atom": "body",
                "file": "module.md",
                "nodes": [
                  [
                    {
                      "atom": "page",
                      "file": "module.md",
                      "nodes": [
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h1",
                            "file": "module.md",
                            "level": 1,
                            "nodes": [
                              {
                                "text": "Generics",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "href": "https://en.wikipedia.org/wiki/Generic_programming",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Generics",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://en.wikipedia.org/wiki/Generic_programming"
                                }
                              ],
                              {
                                "text": " were first introduced to Go with the release of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "href": "https://go.dev/blog/intro-generics",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Go 1.18",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://go.dev/blog/intro-generics"
                                }
                              ],
                              {
                                "text": ". Go 1.18 was release in March of 2022, during the writing of this ",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "binding",
                                "attributes": {
                                  "whole": ""
                                },
                                "file": "module.md",
                                "type": "*hype.Element"
                              },
                              {
                                "text": ". We, like the Go team, have tried our best to present the current idioms and thoughts on the how, what, when, where, and why questions about generics in Go.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "What are Generics?",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Generic programming is a programming paradigm that allows us to stub out the implementation of a function with a type that will be provided later. This has benefits for both writing, and using, generic functions. With generics we can write functions that can work with multiple types directly, without having to write the same function multiple times, once for each type. When using generic functions, we can continue use our types as concrete types, instead of interface representations.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "The Problem with Interfaces",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Interfaces in Go are a powerful concept that allows developers to create flexible and reusable code. Interfaces allow us to define a set of methods that describe the behavior of a type. Any type that implements those methods, and behaviors, is considered to implement that interface.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "We have already discussed the benefits and drawbacks of interfaces earlier in this ",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "binding",
                                "attributes": {
                                  "whole": ""
                                },
                                "file": "module.md",
                                "type": "*hype.Element"
                              },
                              {
                                "text": " so we don't have to re-iterate the benefits of interfaces, but let's discuss some problems with interfaces. For example, consider the function defined in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-1"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-1"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.1",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-1"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", and the problem of how to write a function that will return the keys for a given map.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-1",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Keys"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Keys",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/keys/any",
                                    "sym": "Keys"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func Keys(m map[any]any) []any {\n\n\t// make a slice of the keys\n\tkeys := make([]any, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Keys"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/any",
                                        "stdout": "ZnVuYyBLZXlzKG0gbWFwW2FueV1hbnkpIFtdYW55IHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXWFueSwgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                        "duration": 53894083,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func Keys(m map[any]any) []any {\n\n\t// make a slice of the keys\n\tkeys := make([]any, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Keys"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/any",
                                      "stdout": "ZnVuYyBLZXlzKG0gbWFwW2FueV1hbnkpIFtdYW55IHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXWFueSwgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                      "duration": 53894083,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.1:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "A function that returns the keys of a map.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 1,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Go is a statically typed language and so we have to specify the type of the map that we want to get the keys from. A map needs to have both its key and value types specified. We also need to specify the type of slice this function will be returning. In order for this function to support all map types we need to use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "any",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", or empty interface, type which will match any type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "While this means we can write a function that we return a list of keys from a map, it also means that this function is difficult to use. Consider a test, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-2"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-2"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.2",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-2"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", that tries use a map that isn't of type ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "map[any]any",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". This code fails to compile because the type of map in the test is not compatible with the type of map required by the function.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-2",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/keys/any/keys_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "func Test_Keys(t *testing.T) {\n\tt.Parallel()\n\n\t// create a map with some values\n\tm := map[int]string{\n\t\t1: \"one\",\n\t\t2: \"two\",\n\t\t3: \"three\",\n\t}\n\n\t// get the keys\n\tact := Keys(m)\n\n\t// sort the returned keys for comparison\n\tsort.Slice(act, func(i, j int) bool {\n\t\treturn act[i] \u003c act[j]\n\t})\n\n\t// set the expected values\n\texp := []int{1, 2, 3}\n\n\t// assert the length of the actual and expected values\n\tal := len(act)\n\tel := len(exp)\n\tif al != el {\n\t\tt.Fatalf(\"expected %d, but got %d\", el, al)\n\t}\n\n\t// loop through the expected values and\n\t// assert they are in the actual values\n\tfor i, v := range exp {\n\t\tif v != act[i] {\n\t\t\tt.Fatalf(\"expected %d, but got %d\", v, act[i])\n\t\t}\n\t}\n\n}",
                                          "file": "src/keys/any/keys_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 8,
                                          "end": 47,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "exit": "-1",
                                    "src": "src/keys/any",
                                    "test": "-v"
                                  },
                                  "expected_exit": -1,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:20:14: cannot use m (variable of type map[int]string) as map[any]any value in argument to Keys\n./keys_test.go:24:10: invalid operation: act[i] \u0026lt; act[j] (operator \u0026lt; not defined on interface)",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/any",
                                        "err": {
                                          "Stderr": null
                                        },
                                        "exit": 1,
                                        "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIwOjE0OiBjYW5ub3QgdXNlIG0gKHZhcmlhYmxlIG9mIHR5cGUgbWFwW2ludF1zdHJpbmcpIGFzIG1hcFthbnldYW55IHZhbHVlIGluIGFyZ3VtZW50IHRvIEtleXMKLi9rZXlzX3Rlc3QuZ286MjQ6MTA6IGludmFsaWQgb3BlcmF0aW9uOiBhY3RbaV0gPCBhY3Rbal0gKG9wZXJhdG9yIDwgbm90IGRlZmluZWQgb24gaW50ZXJmYWNlKQ==",
                                        "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                        "duration": 258040375,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:20:14: cannot use m (variable of type map[int]string) as map[any]any value in argument to Keys\n./keys_test.go:24:10: invalid operation: act[i] \u0026lt; act[j] (operator \u0026lt; not defined on interface)",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/any",
                                      "err": {
                                        "Stderr": null
                                      },
                                      "exit": 1,
                                      "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIwOjE0OiBjYW5ub3QgdXNlIG0gKHZhcmlhYmxlIG9mIHR5cGUgbWFwW2ludF1zdHJpbmcpIGFzIG1hcFthbnldYW55IHZhbHVlIGluIGFyZ3VtZW50IHRvIEtleXMKLi9rZXlzX3Rlc3QuZ286MjQ6MTA6IGludmFsaWQgb3BlcmF0aW9uOiBhY3RbaV0gPCBhY3Rbal0gKG9wZXJhdG9yIDwgbm90IGRlZmluZWQgb24gaW50ZXJmYWNlKQ==",
                                      "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                      "duration": 258040375,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.2:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Compilation error caused by a type mismatch.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 2,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-3"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-3"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.3",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-3"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " is an attempt to solve this problem. First, we need to create a new, interstitial map of the correct type, and copy all of the keys from the original map into the new map. The same is true of trying to handle the results. We need to loop through the returned slice of keys, asserts the keys are of the correct type, and then copy those values into a new slice of the correct type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-3",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/keys/fixed/keys_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "func Test_Keys(t *testing.T) {\n\tt.Parallel()\n\n\t// create a map with some values\n\tm := map[int]string{\n\t\t1: \"one\",\n\t\t2: \"two\",\n\t\t3: \"three\",\n\t}\n\n\t// create an interstitial map to pass to the function\n\tim := map[any]any{}\n\n\t// copy the map into the interstitial map\n\tfor k, v := range m {\n\t\tim[k] = v\n\t}\n\n\t// get the keys\n\tkeys := Keys(im)\n\n\t// create a slice to hold the keys as\n\t// integers for comparison\n\tact := make([]int, 0, len(keys))\n\n\t// copy the keys into the integer slice\n\tfor _, k := range keys {\n\t\t// assert that the key is an int\n\t\ti, ok := k.(int)\n\t\tif !ok {\n\t\t\tt.Fatalf(\"expected type int, got %T\", k)\n\t\t}\n\n\t\tact = append(act, i)\n\t}\n\n\t// sort the returned keys for comparison\n\tsort.Slice(act, func(i, j int) bool {\n\t\treturn act[i] \u003c act[j]\n\t})\n\n\t// set the expected values\n\texp := []int{1, 2, 3}\n\n\t// assert the length of the actual and expected values\n\tal := len(act)\n\tel := len(exp)\n\tif al != el {\n\t\tt.Fatalf(\"expected %d, but got %d\", el, al)\n\t}\n\n\t// loop through the expected values and\n\t// assert they are in the actual values\n\tfor i, v := range exp {\n\t\tif v != act[i] {\n\t\t\tt.Fatalf(\"expected %d, but got %d\", v, act[i])\n\t\t}\n\t}\n\n}",
                                          "file": "src/keys/fixed/keys_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 8,
                                          "end": 70,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "src": "src/keys/fixed",
                                    "test": "-v"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.405s",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/fixed",
                                        "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuNDA1cw==",
                                        "duration": 1482057375,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.405s",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/fixed",
                                      "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuNDA1cw==",
                                      "duration": 1482057375,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.3:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Copying maps to satisfy a type constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 3,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "While ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-3"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-3"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.3",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-3"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " fixes the tests, it is a very cumbersome way to work with a function such as this. Generics, were designed to help solve exactly this sort of problem.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Type Constraints",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Generics in Go introduced a new concept to the language, called Type Constraints. Type Constraints allow us to specify that a type fits within a certain set of constraints. This is useful when we want to write a function that can work with multiple types, but we want to be able to specify that the function can only work with a specific type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "For example, so far have been using an ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " for the key type in a map, and ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " for the value type. This is fine, but we can use generics to make this more flexible. We may want to use an ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int32",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " or a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "float64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " for the key type, and ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "any",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " value for the value type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Generics allows us to specify those types as constraints when defining a function or a type. Constraints are added with ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "[]",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " after the name of the function or type, but before any parameters. ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-4"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-4"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.4",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-4"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " lays out the anatomy of a generic function.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-4",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "text": "func Name[constraints](parameters) (returns) {\n\t// ...\n}\n",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.FencedCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.4:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Anatomy of a generic function.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 4,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "For example, in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-5"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-5"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.5",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-5"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", we define a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Slicer",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function that defines a constraint, type ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "T",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", which can be of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "any",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type. That new ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "T",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type can then be used in the function signature. In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-5"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-5"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.5",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-5"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Slicer",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function will return a slice of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "T",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " values.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-5",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Slicer"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Slicer",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/slicer",
                                    "sym": "Slicer"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func Slicer[T any](input T) []T {\n\treturn []T{input}\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Slicer"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/slicer",
                                        "stdout": "ZnVuYyBTbGljZXJbVCBhbnldKGlucHV0IFQpIFtdVCB7CglyZXR1cm4gW11Ue2lucHV0fQp9",
                                        "duration": 365827792,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func Slicer[T any](input T) []T {\n\treturn []T{input}\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Slicer"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/slicer",
                                      "stdout": "ZnVuYyBTbGljZXJbVCBhbnldKGlucHV0IFQpIFtdVCB7CglyZXR1cm4gW11Ue2lucHV0fQp9",
                                      "duration": 365827792,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.5:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "A generic function that returns a slice of values.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 5,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When calling the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Slicer",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function, as seen in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-6"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-6"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.6",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-6"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " we can pass any type, and it returns a slice of that same type back.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-6",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/slicer/slicer_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "func Test_Slicer(t *testing.T) {\n\tt.Parallel()\n\n\t// create input string\n\tinput := \"Hello World\"\n\n\t// capture output []string\n\tact := Slicer(input)\n\n\texp := []string{input}\n\n\tif len(act) != len(exp) {\n\t\tt.Fatalf(\"expected %v, got %v\", exp, act)\n\t}\n\n\tfor i, v := range exp {\n\t\tif act[i] != v {\n\t\t\tt.Fatalf(\"expected %v, got %v\", exp, act)\n\t\t}\n\t}\n\n}",
                                          "file": "src/slicer/slicer_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 7,
                                          "end": 31,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "src": "src/slicer",
                                    "test": "-v"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\n=== RUN   Test_Slicer\n=== PAUSE Test_Slicer\n=== CONT  Test_Slicer\n--- PASS: Test_Slicer (0.00s)\nPASS\nok  \tdemo\t0.300s",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/slicer",
                                        "stdout": "PT09IFJVTiAgIFRlc3RfU2xpY2VyCj09PSBQQVVTRSBUZXN0X1NsaWNlcgo9PT0gQ09OVCAgVGVzdF9TbGljZXIKLS0tIFBBU1M6IFRlc3RfU2xpY2VyICgwLjAwcykKUEFTUwpvayAgCWRlbW8JMC4zMDBz",
                                        "duration": 1660076000,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\n=== RUN   Test_Slicer\n=== PAUSE Test_Slicer\n=== CONT  Test_Slicer\n--- PASS: Test_Slicer (0.00s)\nPASS\nok  \tdemo\t0.300s",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/slicer",
                                      "stdout": "PT09IFJVTiAgIFRlc3RfU2xpY2VyCj09PSBQQVVTRSBUZXN0X1NsaWNlcgo9PT0gQ09OVCAgVGVzdF9TbGljZXIKLS0tIFBBU1M6IFRlc3RfU2xpY2VyICgwLjAwcykKUEFTUwpvayAgCWRlbW8JMC4zMDBz",
                                      "duration": 1660076000,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.6:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Calling a generic function.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 6,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In our tests we passed a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type to the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Slicer",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function. At compile time, sees that we are calling the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Slicer",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function with a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type and then inserts a function with the appropriate typed signature. For example, by passing a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type to the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Slicer",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function, the compiler generates a function that looks like ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-7"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-7"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.7",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-7"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-7",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Slicer"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Slicer",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/slicer-static",
                                    "sym": "Slicer"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func Slicer(input string) []string {\n\treturn []string{input}\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Slicer"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/slicer-static",
                                        "stdout": "ZnVuYyBTbGljZXIoaW5wdXQgc3RyaW5nKSBbXXN0cmluZyB7CglyZXR1cm4gW11zdHJpbmd7aW5wdXR9Cn0=",
                                        "duration": 311013500,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func Slicer(input string) []string {\n\treturn []string{input}\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Slicer"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/slicer-static",
                                      "stdout": "ZnVuYyBTbGljZXIoaW5wdXQgc3RyaW5nKSBbXXN0cmluZyB7CglyZXR1cm4gW11zdHJpbmd7aW5wdXR9Cn0=",
                                      "duration": 311013500,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.7:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "A static function that returns a slice of strings.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 7,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Multiple Generic Types",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "With an understanding of the basics of generics, let's revisit the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-8"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-8"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.8",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-8"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", and update it to support generics.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-8",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Keys"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Keys",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/keys/fixed",
                                    "sym": "Keys"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "// snippet: def\nfunc Keys(m map[any]any) []any {\n\t// snippet: def\n\n\t// make a slice of the keys\n\tkeys := make([]any, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Keys"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/fixed",
                                        "stdout": "Ly8gc25pcHBldDogZGVmCmZ1bmMgS2V5cyhtIG1hcFthbnldYW55KSBbXWFueSB7CgkvLyBzbmlwcGV0OiBkZWYKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXWFueSwgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                        "duration": 594976959,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "// snippet: def\nfunc Keys(m map[any]any) []any {\n\t// snippet: def\n\n\t// make a slice of the keys\n\tkeys := make([]any, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Keys"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/fixed",
                                      "stdout": "Ly8gc25pcHBldDogZGVmCmZ1bmMgS2V5cyhtIG1hcFthbnldYW55KSBbXWFueSB7CgkvLyBzbmlwcGV0OiBkZWYKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXWFueSwgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                      "duration": 594976959,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.8:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function before generics.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 8,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "A map has both a key and a value type. We can use generics to specify which types are allowed to be used for both. In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-9"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-9"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.9",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-9"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", we can specify that the key type, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "K",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", must of a type ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", but the value type, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "V",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", can be of any type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-9",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Keys"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Keys",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/keys/generic/start",
                                    "sym": "Keys"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "// snippet: def\nfunc Keys[K int, V any](m map[K]V) []K {\n\t// snippet: def\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Keys"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/generic/start",
                                        "stdout": "Ly8gc25pcHBldDogZGVmCmZ1bmMgS2V5c1tLIGludCwgViBhbnldKG0gbWFwW0tdVikgW11LIHsKCS8vIHNuaXBwZXQ6IGRlZgoKCS8vIG1ha2UgYSBzbGljZSBvZiB0aGUga2V5cwoJa2V5cyA6PSBtYWtlKFtdSywgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                        "duration": 368186542,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "// snippet: def\nfunc Keys[K int, V any](m map[K]V) []K {\n\t// snippet: def\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Keys"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/generic/start",
                                      "stdout": "Ly8gc25pcHBldDogZGVmCmZ1bmMgS2V5c1tLIGludCwgViBhbnldKG0gbWFwW0tdVikgW11LIHsKCS8vIHNuaXBwZXQ6IGRlZgoKCS8vIG1ha2UgYSBzbGljZSBvZiB0aGUga2V5cwoJa2V5cyA6PSBtYWtlKFtdSywgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                      "duration": 368186542,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.9:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function after generics.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 9,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "With the changes in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-9"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-9"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.9",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-9"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " we can pass a map of key type ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " and a value type of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " to the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function and it will return a slice of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " values.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-10",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/keys/generic/start/keys_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "func Test_Keys(t *testing.T) {\n\tt.Parallel()\n\n\t// create a map with some values\n\tm := map[int]string{\n\t\t1: \"one\",\n\t\t2: \"two\",\n\t\t3: \"three\",\n\t}\n\n\t// get the keys\n\tact := Keys(m)\n\n\t// sort the returned keys for comparison\n\tsort.Slice(act, func(i, j int) bool {\n\t\treturn act[i] \u003c act[j]\n\t})\n\n\t// set the expected values\n\texp := []int{1, 2, 3}\n\n\t// assert the length of the actual and expected values\n\tif len(exp) != len(act) {\n\t\tt.Fatalf(\"expected len(%d), but got len(%d)\", len(exp), len(act))\n\t}\n\n\t// assert the types of the actual and expected values\n\tat := fmt.Sprintf(\"%T\", act)\n\tet := fmt.Sprintf(\"%T\", exp)\n\n\tif at != et {\n\t\tt.Fatalf(\"expected type %s, but got type %s\", et, at)\n\t}\n\n\t// loop through the expected values and\n\t// assert they are in the actual values\n\tfor i, v := range exp {\n\t\tif v != act[i] {\n\t\t\tt.Fatalf(\"expected %d, but got %d\", v, act[i])\n\t\t}\n\t}\n\n}",
                                          "file": "src/keys/generic/start/keys_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 9,
                                          "end": 54,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "src": "src/keys/generic/start",
                                    "test": "-v"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.123s",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/generic/start",
                                        "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuMTIzcw==",
                                        "duration": 896718625,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.123s",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/keys/generic/start",
                                      "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuMTIzcw==",
                                      "duration": 896718625,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.10:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Tests now passing after using generics in ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-9"
                                        },
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-9"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.9",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-9"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 10,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "As ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-10"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-10"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.10",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-10"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " shows, This however, doesn't work if we want to use a map key of type ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " or ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "float64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". To do this we will need to specify a bigger set of constraints for the key type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Instantiating Generic Functions",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When calling a generic function, or creating a new value of a generic type, the Go compiler needs to know which types are being provided for the generic parameters. So far, we have been letting the Go compiler infer the types of the generic parameters based on the types of the values passed in. In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-11"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-11"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.11",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-11"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", a variable, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "fn",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", is being declared and initialized with the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function from ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-9"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-9"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.9",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-9"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ". When the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "fn",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " variable is called, the compiler is unable to infer the types of the generic parameters. The result is a compilation error.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-11",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/instantiation/broken/keys_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "// create a function variable pointing\n// to the Keys function\nfn := Keys\n\n// get the keys\nact := fn(m)",
                                          "file": "src/instantiation/broken/keys_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 19,
                                          "end": 26,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "exit": "-1",
                                    "src": "src/instantiation/broken",
                                    "test": "-v"
                                  },
                                  "expected_exit": -1,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:22:8: cannot use generic function Keys without instantiation",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/instantiation/broken",
                                        "err": {
                                          "Stderr": null
                                        },
                                        "exit": 1,
                                        "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIyOjg6IGNhbm5vdCB1c2UgZ2VuZXJpYyBmdW5jdGlvbiBLZXlzIHdpdGhvdXQgaW5zdGFudGlhdGlvbg==",
                                        "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                        "duration": 1887015625,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:22:8: cannot use generic function Keys without instantiation",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/instantiation/broken",
                                      "err": {
                                        "Stderr": null
                                      },
                                      "exit": 1,
                                      "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIyOjg6IGNhbm5vdCB1c2UgZ2VuZXJpYyBmdW5jdGlvbiBLZXlzIHdpdGhvdXQgaW5zdGFudGlhdGlvbg==",
                                      "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                      "duration": 1887015625,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.11:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function before instantiation.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 11,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In these situations we need to provide the compiler with the types of the generic parameters. In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-12"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-12"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.12",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-12"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " The types, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " and ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", are being provided when grabbing a reference to the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function for the variable ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "fn",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-12",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/instantiation/fixed/keys_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "// create a function variable pointing\n// to the Keys function\nfn := Keys[int, string]\n\n// get the keys\nact := fn(m)",
                                          "file": "src/instantiation/fixed/keys_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 19,
                                          "end": 26,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "src": "src/instantiation/fixed",
                                    "test": "-v"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.490s",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/instantiation/fixed",
                                        "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuNDkwcw==",
                                        "duration": 2048584750,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.490s",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/instantiation/fixed",
                                      "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuNDkwcw==",
                                      "duration": 2048584750,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.12:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function after instantiation.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 12,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Defining Constraints",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "So far we have been using pretty simple types, such as ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " and ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "any",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " for the key and value types. But what if we wanted to use more types than just these? To specify which types can be used for a generic parameter, we can use constraints. Constraints are defined in a similar way to interfaces, but instead of specifying a set of methods, we specify a set of types.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "As a start we can define a constraint, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-13"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-13"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.13",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-13"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " that requires the type to be an ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-13",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "MapKey"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short MapKey",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/constraints/defining",
                                    "sym": "MapKey"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "// MapKey is a set of a constraints\n// on types that can be used as map keys.\ntype MapKey interface {\n\tint\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "MapKey"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/defining",
                                        "stdout": "Ly8gTWFwS2V5IGlzIGEgc2V0IG9mIGEgY29uc3RyYWludHMKLy8gb24gdHlwZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyBtYXAga2V5cy4KdHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCWludAp9",
                                        "duration": 363749250,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "// MapKey is a set of a constraints\n// on types that can be used as map keys.\ntype MapKey interface {\n\tint\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "MapKey"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/defining",
                                      "stdout": "Ly8gTWFwS2V5IGlzIGEgc2V0IG9mIGEgY29uc3RyYWludHMKLy8gb24gdHlwZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyBtYXAga2V5cy4KdHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCWludAp9",
                                      "duration": 363749250,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.13:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "A constraint that requires the type to be an ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "int",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 13,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "With the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MapKey",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " constraint defined in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-13"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-13"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.13",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-13"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", we can update the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function to use it instead of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-14"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-14"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.14",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-14"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ]
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-14",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/constraints/defining/keys.go#def"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "func Keys[K MapKey, V any](m map[K]V) []K {\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                          "file": "src/constraints/defining/keys.go",
                                          "lang": "go",
                                          "name": "def",
                                          "start": 9,
                                          "end": 26,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.14:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function using the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "MapKey",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 14,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Multiple Type Constraints",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Currently, the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MapKey",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " constraint only allows an ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " to be used for the key. In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-15"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-15"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.15",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-15"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": "we to try and use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function with a map using a key type of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "float64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". The result is a compilation error.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-15",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/constraints/floats/keys_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "// create a map with some values\nm := map[float64]string{\n\t1.1: \"one\",\n\t2.2: \"two\",\n\t3.3: \"three\",\n}\n\n// get the keys\nact := Keys(m)\n\n// sort the returned keys for comparison\nsort.Slice(act, func(i, j int) bool {\n\treturn act[i] \u003c act[j]\n})\n\n// set the expected values\nexp := []float64{1.1, 2.2, 3.3}\n\n// assert the length of the actual and expected values\nif len(exp) != len(act) {\n\tt.Fatalf(\"expected len(%d), but got len(%d)\", len(exp), len(act))\n}\n\n// assert the types of the actual and expected values\nat := fmt.Sprintf(\"%T\", act)\net := fmt.Sprintf(\"%T\", exp)\n\nif at != et {\n\tt.Fatalf(\"expected type %s, but got type %s\", et, at)\n}\n\n// loop through the expected values and\n// assert they are in the actual values\nfor i, v := range exp {\n\tif v != act[i] {\n\t\tt.Fatalf(\"expected %d, but got %d\", v, act[i])\n\t}\n}",
                                          "file": "src/constraints/floats/keys_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 12,
                                          "end": 51,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "exit": "-1",
                                    "src": "src/constraints/floats",
                                    "test": "-v"
                                  },
                                  "expected_exit": -1,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:21:13: K (type float64) does not satisfy MapKey",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/floats",
                                        "err": {
                                          "Stderr": null
                                        },
                                        "exit": 1,
                                        "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIxOjEzOiBLICh0eXBlIGZsb2F0NjQpIGRvZXMgbm90IHNhdGlzZnkgTWFwS2V5",
                                        "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                        "duration": 412549042,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:21:13: K (type float64) does not satisfy MapKey",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/floats",
                                      "err": {
                                        "Stderr": null
                                      },
                                      "exit": 1,
                                      "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIxOjEzOiBLICh0eXBlIGZsb2F0NjQpIGRvZXMgbm90IHNhdGlzZnkgTWFwS2V5",
                                      "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                      "duration": 412549042,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.15:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function with a ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "float64",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " key.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 15,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When defining constraints we can use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "|",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " operator to create an intersection of constraints. For example, in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-16"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-16"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.16",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-16"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " we define a constraint that requires the key type to be either ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " or ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "float64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-16",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "MapKey"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short MapKey",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/constraints/or",
                                    "sym": "MapKey"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "// MapKey is a set of a constraints\n// on types that can be used as map keys.\ntype MapKey interface {\n\tint | float64\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "MapKey"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/or",
                                        "stdout": "Ly8gTWFwS2V5IGlzIGEgc2V0IG9mIGEgY29uc3RyYWludHMKLy8gb24gdHlwZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyBtYXAga2V5cy4KdHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCWludCB8IGZsb2F0NjQKfQ==",
                                        "duration": 518426833,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "// MapKey is a set of a constraints\n// on types that can be used as map keys.\ntype MapKey interface {\n\tint | float64\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "MapKey"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/or",
                                      "stdout": "Ly8gTWFwS2V5IGlzIGEgc2V0IG9mIGEgY29uc3RyYWludHMKLy8gb24gdHlwZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyBtYXAga2V5cy4KdHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCWludCB8IGZsb2F0NjQKfQ==",
                                      "duration": 518426833,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.16:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "A constraint that requires the key type to be either ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "int",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " or ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "float64",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 16,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "With the change to the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MapKey",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " constraint in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-16"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-16"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.16",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-16"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", we can use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function with a map using a key type of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "float64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". The tests in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-17"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-17"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.17",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-17"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " now pass.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-17",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "src": "src/constraints/or",
                                    "test": "-v"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.343s",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/or",
                                        "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuMzQzcw==",
                                        "duration": 1326058958,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.343s",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/or",
                                      "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuMzQzcw==",
                                      "duration": 1326058958,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.17:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Tests now passing with the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "MapKey",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 17,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Underlying Type Constraints",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In Go, we are allowed to create new types based on other types. For example, we can create a new type, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MyInt",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", that is based on the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-18",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "MyInt"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short MyInt",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/constraints/underlying/broken",
                                    "sym": "MyInt"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "type MyInt int",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "MyInt"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/broken",
                                        "stdout": "dHlwZSBNeUludCBpbnQ=",
                                        "duration": 505509500,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "type MyInt int",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "MyInt"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/broken",
                                      "stdout": "dHlwZSBNeUludCBpbnQ=",
                                      "duration": 505509500,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.18:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "A new type based on the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "int",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " type.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 18,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "However, when we try to use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function with a map using a key type of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MyInt",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " we will get a compile error.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-19",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/constraints/underlying/broken/keys_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "func Test_Keys(t *testing.T) {\n\tt.Parallel()\n\n\t// create a map with some values\n\tm := map[MyInt]string{\n\t\t1: \"one\",\n\t\t2: \"two\",\n\t\t3: \"three\",\n\t}\n\n\t// get the keys\n\tact := Keys(m)\n\n\t// sort the returned keys for comparison\n\tsort.Slice(act, func(i, j int) bool {\n\t\treturn act[i] \u003c act[j]\n\t})\n\n\t// set the expected values\n\texp := []MyInt{1, 2, 3}\n\n\t// assert the length of the actual and expected values\n\tif len(exp) != len(act) {\n\t\tt.Fatalf(\"expected len(%d), but got len(%d)\", len(exp), len(act))\n\t}\n\n\t// assert the types of the actual and expected values\n\tat := fmt.Sprintf(\"%T\", act)\n\tet := fmt.Sprintf(\"%T\", exp)\n\n\tif at != et {\n\t\tt.Fatalf(\"expected type %s, but got type %s\", et, at)\n\t}\n\n\t// loop through the expected values and\n\t// assert they are in the actual values\n\tfor i, v := range exp {\n\t\tif v != act[i] {\n\t\t\tt.Fatalf(\"expected %d, but got %d\", v, act[i])\n\t\t}\n\t}\n\n}",
                                          "file": "src/constraints/underlying/broken/keys_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 9,
                                          "end": 54,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "exit": "-1",
                                    "src": "src/constraints/underlying/broken",
                                    "test": "-v"
                                  },
                                  "expected_exit": -1,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:21:13: MyInt does not satisfy MapKey (possibly missing ~ for int in MapKey)",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/broken",
                                        "err": {
                                          "Stderr": null
                                        },
                                        "exit": 1,
                                        "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIxOjEzOiBNeUludCBkb2VzIG5vdCBzYXRpc2Z5IE1hcEtleSAocG9zc2libHkgbWlzc2luZyB+IGZvciBpbnQgaW4gTWFwS2V5KQ==",
                                        "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                        "duration": 846257500,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys_test.go:21:13: MyInt does not satisfy MapKey (possibly missing ~ for int in MapKey)",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/broken",
                                      "err": {
                                        "Stderr": null
                                      },
                                      "exit": 1,
                                      "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5c190ZXN0LmdvOjIxOjEzOiBNeUludCBkb2VzIG5vdCBzYXRpc2Z5IE1hcEtleSAocG9zc2libHkgbWlzc2luZyB+IGZvciBpbnQgaW4gTWFwS2V5KQ==",
                                      "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                      "duration": 846257500,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.19:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "MyInt",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " type does not meet the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "int",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 19,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "The reason for the compilation in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-19"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-19"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.19",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-19"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", is that the type ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MyInt",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", while based on ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", does not satisfy the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MapKey",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " constraint because it is ",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "strong",
                                "file": "module.md",
                                "nodes": [
                                  {
                                    "text": "not",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": " an ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " itself. When writing constraints we, usually, are interested in the underlying type, not the type that is wrapped by the type. To express this in when defining a constraint we can use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "~",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " operator.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-20",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "MapKey"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short MapKey",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/constraints/underlying/fixed",
                                    "sym": "MapKey"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "// MapKey is a set of a constraints\n// on types that can be used as map keys.\ntype MapKey interface {\n\t~int\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "MapKey"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/fixed",
                                        "stdout": "Ly8gTWFwS2V5IGlzIGEgc2V0IG9mIGEgY29uc3RyYWludHMKLy8gb24gdHlwZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyBtYXAga2V5cy4KdHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCX5pbnQKfQ==",
                                        "duration": 581698583,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "// MapKey is a set of a constraints\n// on types that can be used as map keys.\ntype MapKey interface {\n\t~int\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "MapKey"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/fixed",
                                      "stdout": "Ly8gTWFwS2V5IGlzIGEgc2V0IG9mIGEgY29uc3RyYWludHMKLy8gb24gdHlwZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyBtYXAga2V5cy4KdHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCX5pbnQKfQ==",
                                      "duration": 581698583,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.20:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Using the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "~",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " operator to allow for super-types.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 20,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "By updating the constraint to use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "~",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " operator, the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function will accept any type based on ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". Because ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MyInt",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " is based on ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", we can now use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function with a map using a key type of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "MyInt",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-21",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "src": "src/constraints/underlying/fixed",
                                    "test": "-v"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.276s",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/fixed",
                                        "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuMjc2cw==",
                                        "duration": 1463195583,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\n=== RUN   Test_Keys\n=== PAUSE Test_Keys\n=== CONT  Test_Keys\n--- PASS: Test_Keys (0.00s)\nPASS\nok  \tdemo\t0.276s",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/underlying/fixed",
                                      "stdout": "PT09IFJVTiAgIFRlc3RfS2V5cwo9PT0gUEFVU0UgVGVzdF9LZXlzCj09PSBDT05UICBUZXN0X0tleXMKLS0tIFBBU1M6IFRlc3RfS2V5cyAoMC4wMHMpClBBU1MKb2sgIAlkZW1vCTAuMjc2cw==",
                                      "duration": 1463195583,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.21:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Tests now passing with the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "~",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " constraint operator.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 21,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "The Constraints Package",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When generics were released in Go 1.18, the Go team, decided to be cautious and not update the standard library immediately to use them. They wanted to see how generics were being used before deciding to update the standard library. As a result of this, the Go team have create a series of packages in the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp",
                                    "href": "https://pkg.go.dev/golang.org/x/exp",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "golang.org/x/exp",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp"
                                }
                              ],
                              {
                                "text": " namespace to experiment with generics. One of these packages is the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "golang.org/x/exp/constraints",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints"
                                }
                              ],
                              {
                                "text": " package, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-22"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-22"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.22",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-22"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ". The ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "golang.org/x/exp/constraints",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints"
                                }
                              ],
                              {
                                "text": " package defines a set of constraints for all of the numerical, and comparable types in the language.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-22",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "golang.org/x/exp/constraints"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "doc": "golang.org/x/exp/constraints",
                                    "exec": "go doc golang.org/x/exp/constraints",
                                    "src": "src/constraints/pkg"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go doc golang.org/x/exp/constraints\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\nPackage constraints defines a set of useful constraints to be used with type\nparameters.\n\ntype Complex interface{ ... }\ntype Float interface{ ... }\ntype Integer interface{ ... }\ntype Ordered interface{ ... }\ntype Signed interface{ ... }\ntype Unsigned interface{ ... }",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "golang.org/x/exp/constraints"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                        "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgpQYWNrYWdlIGNvbnN0cmFpbnRzIGRlZmluZXMgYSBzZXQgb2YgdXNlZnVsIGNvbnN0cmFpbnRzIHRvIGJlIHVzZWQgd2l0aCB0eXBlCnBhcmFtZXRlcnMuCgp0eXBlIENvbXBsZXggaW50ZXJmYWNleyAuLi4gfQp0eXBlIEZsb2F0IGludGVyZmFjZXsgLi4uIH0KdHlwZSBJbnRlZ2VyIGludGVyZmFjZXsgLi4uIH0KdHlwZSBPcmRlcmVkIGludGVyZmFjZXsgLi4uIH0KdHlwZSBTaWduZWQgaW50ZXJmYWNleyAuLi4gfQp0eXBlIFVuc2lnbmVkIGludGVyZmFjZXsgLi4uIH0=",
                                        "duration": 532235042,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go doc golang.org/x/exp/constraints\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\nPackage constraints defines a set of useful constraints to be used with type\nparameters.\n\ntype Complex interface{ ... }\ntype Float interface{ ... }\ntype Integer interface{ ... }\ntype Ordered interface{ ... }\ntype Signed interface{ ... }\ntype Unsigned interface{ ... }",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "golang.org/x/exp/constraints"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                      "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgpQYWNrYWdlIGNvbnN0cmFpbnRzIGRlZmluZXMgYSBzZXQgb2YgdXNlZnVsIGNvbnN0cmFpbnRzIHRvIGJlIHVzZWQgd2l0aCB0eXBlCnBhcmFtZXRlcnMuCgp0eXBlIENvbXBsZXggaW50ZXJmYWNleyAuLi4gfQp0eXBlIEZsb2F0IGludGVyZmFjZXsgLi4uIH0KdHlwZSBJbnRlZ2VyIGludGVyZmFjZXsgLi4uIH0KdHlwZSBPcmRlcmVkIGludGVyZmFjZXsgLi4uIH0KdHlwZSBTaWduZWQgaW50ZXJmYWNleyAuLi4gfQp0eXBlIFVuc2lnbmVkIGludGVyZmFjZXsgLi4uIH0=",
                                      "duration": 532235042,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.22:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "golang.org/x/exp/constraints",
                                          "href": "https://pkg.go.dev/golang.org/x/exp/constraints",
                                          "target": "_blank"
                                        },
                                        "nodes": [
                                          [
                                            {
                                              "atom": "code",
                                              "nodes": [
                                                {
                                                  "text": "golang.org/x/exp/constraints",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ]
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/golang.org/x/exp/constraints"
                                      }
                                    ],
                                    {
                                      "text": " package.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 22,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "For example, consider the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Signed",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Signed",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Signed",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Signed"
                                }
                              ],
                              {
                                "text": " constraint, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-23"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-23"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.23",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-23"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ". This constraint requires that the type be any of the signed integer types, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "+/-",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " defined in the Go language, such ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " and ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", and any types based on those types.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-23",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "golang.org/x/exp/constraints.Signed"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "doc": "golang.org/x/exp/constraints.Signed",
                                    "exec": "go doc golang.org/x/exp/constraints.Signed",
                                    "src": "src/constraints/pkg"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go doc golang.org/x/exp/constraints.Signed\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\ntype Signed interface {\n\t~int | ~int8 | ~int16 | ~int32 | ~int64\n}\n    Signed is a constraint that permits any signed integer type. If future\n    releases of Go add new predeclared signed integer types, this constraint\n    will be modified to include them.",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "golang.org/x/exp/constraints.Signed"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                        "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgp0eXBlIFNpZ25lZCBpbnRlcmZhY2UgewoJfmludCB8IH5pbnQ4IHwgfmludDE2IHwgfmludDMyIHwgfmludDY0Cn0KICAgIFNpZ25lZCBpcyBhIGNvbnN0cmFpbnQgdGhhdCBwZXJtaXRzIGFueSBzaWduZWQgaW50ZWdlciB0eXBlLiBJZiBmdXR1cmUKICAgIHJlbGVhc2VzIG9mIEdvIGFkZCBuZXcgcHJlZGVjbGFyZWQgc2lnbmVkIGludGVnZXIgdHlwZXMsIHRoaXMgY29uc3RyYWludAogICAgd2lsbCBiZSBtb2RpZmllZCB0byBpbmNsdWRlIHRoZW0u",
                                        "duration": 532097250,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go doc golang.org/x/exp/constraints.Signed\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\ntype Signed interface {\n\t~int | ~int8 | ~int16 | ~int32 | ~int64\n}\n    Signed is a constraint that permits any signed integer type. If future\n    releases of Go add new predeclared signed integer types, this constraint\n    will be modified to include them.",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "golang.org/x/exp/constraints.Signed"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                      "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgp0eXBlIFNpZ25lZCBpbnRlcmZhY2UgewoJfmludCB8IH5pbnQ4IHwgfmludDE2IHwgfmludDMyIHwgfmludDY0Cn0KICAgIFNpZ25lZCBpcyBhIGNvbnN0cmFpbnQgdGhhdCBwZXJtaXRzIGFueSBzaWduZWQgaW50ZWdlciB0eXBlLiBJZiBmdXR1cmUKICAgIHJlbGVhc2VzIG9mIEdvIGFkZCBuZXcgcHJlZGVjbGFyZWQgc2lnbmVkIGludGVnZXIgdHlwZXMsIHRoaXMgY29uc3RyYWludAogICAgd2lsbCBiZSBtb2RpZmllZCB0byBpbmNsdWRlIHRoZW0u",
                                      "duration": 532097250,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.23:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "golang.org/x/exp/constraints#Signed",
                                          "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Signed",
                                          "target": "_blank"
                                        },
                                        "nodes": [
                                          [
                                            {
                                              "atom": "code",
                                              "nodes": [
                                                {
                                                  "text": "constraints.Signed",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ]
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Signed"
                                      }
                                    ],
                                    {
                                      "text": " constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 23,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "The ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Integer",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Integer",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Integer",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Integer"
                                }
                              ],
                              {
                                "text": " constraint, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-24"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-24"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.24",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-24"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", requires the type to be based on ",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "strong",
                                "file": "module.md",
                                "nodes": [
                                  {
                                    "text": "any",
                                    "type": "hype.Text"
                                  }
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "text": " integer type, signed or unsigned, such as ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "uint",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "uint64",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", etc.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-24",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "golang.org/x/exp/constraints.Integer"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "doc": "golang.org/x/exp/constraints.Integer",
                                    "exec": "go doc golang.org/x/exp/constraints.Integer",
                                    "src": "src/constraints/pkg"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go doc golang.org/x/exp/constraints.Integer\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\ntype Integer interface {\n\tSigned | Unsigned\n}\n    Integer is a constraint that permits any integer type. If future releases\n    of Go add new predeclared integer types, this constraint will be modified to\n    include them.",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "golang.org/x/exp/constraints.Integer"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                        "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgp0eXBlIEludGVnZXIgaW50ZXJmYWNlIHsKCVNpZ25lZCB8IFVuc2lnbmVkCn0KICAgIEludGVnZXIgaXMgYSBjb25zdHJhaW50IHRoYXQgcGVybWl0cyBhbnkgaW50ZWdlciB0eXBlLiBJZiBmdXR1cmUgcmVsZWFzZXMKICAgIG9mIEdvIGFkZCBuZXcgcHJlZGVjbGFyZWQgaW50ZWdlciB0eXBlcywgdGhpcyBjb25zdHJhaW50IHdpbGwgYmUgbW9kaWZpZWQgdG8KICAgIGluY2x1ZGUgdGhlbS4=",
                                        "duration": 477341875,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go doc golang.org/x/exp/constraints.Integer\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\ntype Integer interface {\n\tSigned | Unsigned\n}\n    Integer is a constraint that permits any integer type. If future releases\n    of Go add new predeclared integer types, this constraint will be modified to\n    include them.",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "golang.org/x/exp/constraints.Integer"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                      "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgp0eXBlIEludGVnZXIgaW50ZXJmYWNlIHsKCVNpZ25lZCB8IFVuc2lnbmVkCn0KICAgIEludGVnZXIgaXMgYSBjb25zdHJhaW50IHRoYXQgcGVybWl0cyBhbnkgaW50ZWdlciB0eXBlLiBJZiBmdXR1cmUgcmVsZWFzZXMKICAgIG9mIEdvIGFkZCBuZXcgcHJlZGVjbGFyZWQgaW50ZWdlciB0eXBlcywgdGhpcyBjb25zdHJhaW50IHdpbGwgYmUgbW9kaWZpZWQgdG8KICAgIGluY2x1ZGUgdGhlbS4=",
                                      "duration": 477341875,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.24:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "golang.org/x/exp/constraints#Integer",
                                          "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Integer",
                                          "target": "_blank"
                                        },
                                        "nodes": [
                                          [
                                            {
                                              "atom": "code",
                                              "nodes": [
                                                {
                                                  "text": "constraints.Integer",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ]
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Integer"
                                      }
                                    ],
                                    {
                                      "text": " constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 24,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h3",
                            "file": "module.md",
                            "level": 3,
                            "nodes": [
                              {
                                "text": "The Ordered Constraint",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "One of the most useful constraints defined in the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "golang.org/x/exp/constraints",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints"
                                }
                              ],
                              {
                                "text": " package is the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Ordered",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Ordered",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered"
                                }
                              ],
                              {
                                "text": " constraint, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-25"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-25"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.25",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-25"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ". This constraint list all of the comparable types in the language, and any types based on those types. The ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Ordered",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Ordered",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered"
                                }
                              ],
                              {
                                "text": " constraint covers all numerical types and strings.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-25",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "golang.org/x/exp/constraints.Ordered"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "doc": "golang.org/x/exp/constraints.Ordered",
                                    "exec": "go doc golang.org/x/exp/constraints.Ordered",
                                    "src": "src/constraints/pkg"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go doc golang.org/x/exp/constraints.Ordered\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\ntype Ordered interface {\n\tInteger | Float | ~string\n}\n    Ordered is a constraint that permits any ordered type: any type that\n    supports the operators \u0026lt; \u0026lt;= \u0026gt;= \u0026gt;. If future releases of Go add new ordered\n    types, this constraint will be modified to include them.",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "golang.org/x/exp/constraints.Ordered"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                        "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgp0eXBlIE9yZGVyZWQgaW50ZXJmYWNlIHsKCUludGVnZXIgfCBGbG9hdCB8IH5zdHJpbmcKfQogICAgT3JkZXJlZCBpcyBhIGNvbnN0cmFpbnQgdGhhdCBwZXJtaXRzIGFueSBvcmRlcmVkIHR5cGU6IGFueSB0eXBlIHRoYXQKICAgIHN1cHBvcnRzIHRoZSBvcGVyYXRvcnMgPCA8PSA+PSA+LiBJZiBmdXR1cmUgcmVsZWFzZXMgb2YgR28gYWRkIG5ldyBvcmRlcmVkCiAgICB0eXBlcywgdGhpcyBjb25zdHJhaW50IHdpbGwgYmUgbW9kaWZpZWQgdG8gaW5jbHVkZSB0aGVtLg==",
                                        "duration": 667545875,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go doc golang.org/x/exp/constraints.Ordered\n\npackage constraints // import \u0026#34;golang.org/x/exp/constraints\u0026#34;\n\ntype Ordered interface {\n\tInteger | Float | ~string\n}\n    Ordered is a constraint that permits any ordered type: any type that\n    supports the operators \u0026lt; \u0026lt;= \u0026gt;= \u0026gt;. If future releases of Go add new ordered\n    types, this constraint will be modified to include them.",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "golang.org/x/exp/constraints.Ordered"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                      "stdout": "cGFja2FnZSBjb25zdHJhaW50cyAvLyBpbXBvcnQgImdvbGFuZy5vcmcveC9leHAvY29uc3RyYWludHMiCgp0eXBlIE9yZGVyZWQgaW50ZXJmYWNlIHsKCUludGVnZXIgfCBGbG9hdCB8IH5zdHJpbmcKfQogICAgT3JkZXJlZCBpcyBhIGNvbnN0cmFpbnQgdGhhdCBwZXJtaXRzIGFueSBvcmRlcmVkIHR5cGU6IGFueSB0eXBlIHRoYXQKICAgIHN1cHBvcnRzIHRoZSBvcGVyYXRvcnMgPCA8PSA+PSA+LiBJZiBmdXR1cmUgcmVsZWFzZXMgb2YgR28gYWRkIG5ldyBvcmRlcmVkCiAgICB0eXBlcywgdGhpcyBjb25zdHJhaW50IHdpbGwgYmUgbW9kaWZpZWQgdG8gaW5jbHVkZSB0aGVtLg==",
                                      "duration": 667545875,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.25:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "a",
                                        "attributes": {
                                          "for": "golang.org/x/exp/constraints#Ordered",
                                          "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered",
                                          "target": "_blank"
                                        },
                                        "nodes": [
                                          [
                                            {
                                              "atom": "code",
                                              "nodes": [
                                                {
                                                  "text": "constraints.Ordered",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.InlineCode"
                                            }
                                          ]
                                        ],
                                        "type": "*hype.Link",
                                        "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered"
                                      }
                                    ],
                                    {
                                      "text": " constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 25,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "The ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Ordered",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Ordered",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered"
                                }
                              ],
                              {
                                "text": " constraint is perfect for map keys because all of the types defined in the constraint are comparable. In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-26"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-26"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.26",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-26"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function has been updated to use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Ordered",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Ordered",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered"
                                }
                              ],
                              {
                                "text": " constraint. We can now use the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function with a map using a key type of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", or any other type that is comparable.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-26",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Keys"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Keys",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/constraints/pkg",
                                    "sym": "Keys"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func Keys[K constraints.Ordered, V any](m map[K]V) []K {\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Keys"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                        "stdout": "ZnVuYyBLZXlzW0sgY29uc3RyYWludHMuT3JkZXJlZCwgViBhbnldKG0gbWFwW0tdVikgW11LIHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXUssIDAsIGxlbihtKSkKCgkvLyBpdGVyYXRlIG92ZXIgdGhlIG1hcAoJZm9yIGsgOj0gcmFuZ2UgbSB7CgoJCS8vIGFkZCB0aGUga2V5IHRvIHRoZSBzbGljZQoJCWtleXMgPSBhcHBlbmQoa2V5cywgaykKCX0KCgkvLyByZXR1cm4gdGhlIGtleXMKCXJldHVybiBrZXlzCn0=",
                                        "duration": 113455250,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func Keys[K constraints.Ordered, V any](m map[K]V) []K {\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Keys"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/constraints/pkg",
                                      "stdout": "ZnVuYyBLZXlzW0sgY29uc3RyYWludHMuT3JkZXJlZCwgViBhbnldKG0gbWFwW0tdVikgW11LIHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXUssIDAsIGxlbihtKSkKCgkvLyBpdGVyYXRlIG92ZXIgdGhlIG1hcAoJZm9yIGsgOj0gcmFuZ2UgbSB7CgoJCS8vIGFkZCB0aGUga2V5IHRvIHRoZSBzbGljZQoJCWtleXMgPSBhcHBlbmQoa2V5cywgaykKCX0KCgkvLyByZXR1cm4gdGhlIGtleXMKCXJldHVybiBrZXlzCn0=",
                                      "duration": 113455250,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.26:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function definition.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 26,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Type Assertions",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When using constraints that are based on types, and not on methods like interfaces, type assertions are not allowed. For example, in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-27"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-27"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.27",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-27"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " functions tries to print each map key out to the console, but only if it implements the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "fmt#Stringer",
                                    "href": "https://pkg.go.dev/fmt#Stringer",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "fmt.Stringer",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/fmt#Stringer"
                                }
                              ],
                              {
                                "text": " interface.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-27",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Keys"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Keys",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/assertions/broken",
                                    "sym": "Keys"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func Keys[K constraints.Ordered, V any](m map[K]V) []K {\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// if k implements fmt.Stringer,\n\t\t// print the string representation\n\t\tif st, ok := k.(fmt.Stringer); ok {\n\t\t\tfmt.Println(st.String())\n\t\t}\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Keys"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/broken",
                                        "stdout": "ZnVuYyBLZXlzW0sgY29uc3RyYWludHMuT3JkZXJlZCwgViBhbnldKG0gbWFwW0tdVikgW11LIHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXUssIDAsIGxlbihtKSkKCgkvLyBpdGVyYXRlIG92ZXIgdGhlIG1hcAoJZm9yIGsgOj0gcmFuZ2UgbSB7CgoJCS8vIGlmIGsgaW1wbGVtZW50cyBmbXQuU3RyaW5nZXIsCgkJLy8gcHJpbnQgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbgoJCWlmIHN0LCBvayA6PSBrLihmbXQuU3RyaW5nZXIpOyBvayB7CgkJCWZtdC5QcmludGxuKHN0LlN0cmluZygpKQoJCX0KCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                        "duration": 561685459,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func Keys[K constraints.Ordered, V any](m map[K]V) []K {\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// if k implements fmt.Stringer,\n\t\t// print the string representation\n\t\tif st, ok := k.(fmt.Stringer); ok {\n\t\t\tfmt.Println(st.String())\n\t\t}\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Keys"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/broken",
                                      "stdout": "ZnVuYyBLZXlzW0sgY29uc3RyYWludHMuT3JkZXJlZCwgViBhbnldKG0gbWFwW0tdVikgW11LIHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXUssIDAsIGxlbihtKSkKCgkvLyBpdGVyYXRlIG92ZXIgdGhlIG1hcAoJZm9yIGsgOj0gcmFuZ2UgbSB7CgoJCS8vIGlmIGsgaW1wbGVtZW50cyBmbXQuU3RyaW5nZXIsCgkJLy8gcHJpbnQgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbgoJCWlmIHN0LCBvayA6PSBrLihmbXQuU3RyaW5nZXIpOyBvayB7CgkJCWZtdC5QcmludGxuKHN0LlN0cmluZygpKQoJCX0KCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                      "duration": 561685459,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.27:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Keys",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " function with type assertions.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 27,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "With method based interfaces this is possible, but with constraints we can't make this sort of assertion, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-28"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-28"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.28",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-28"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-28",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "exit": "-1",
                                    "src": "src/assertions/broken",
                                    "test": "-v"
                                  },
                                  "expected_exit": -1,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys.go:19:16: invalid operation: cannot use type assertion on type parameter value k (variable of type K constrained by constraints.Ordered)",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/broken",
                                        "err": {
                                          "Stderr": null
                                        },
                                        "exit": 1,
                                        "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5cy5nbzoxOToxNjogaW52YWxpZCBvcGVyYXRpb246IGNhbm5vdCB1c2UgdHlwZSBhc3NlcnRpb24gb24gdHlwZSBwYXJhbWV0ZXIgdmFsdWUgayAodmFyaWFibGUgb2YgdHlwZSBLIGNvbnN0cmFpbmVkIGJ5IGNvbnN0cmFpbnRzLk9yZGVyZWQp",
                                        "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                        "duration": 1774246458,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys.go:19:16: invalid operation: cannot use type assertion on type parameter value k (variable of type K constrained by constraints.Ordered)",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/broken",
                                      "err": {
                                        "Stderr": null
                                      },
                                      "exit": 1,
                                      "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5cy5nbzoxOToxNjogaW52YWxpZCBvcGVyYXRpb246IGNhbm5vdCB1c2UgdHlwZSBhc3NlcnRpb24gb24gdHlwZSBwYXJhbWV0ZXIgdmFsdWUgayAodmFyaWFibGUgb2YgdHlwZSBLIGNvbnN0cmFpbmVkIGJ5IGNvbnN0cmFpbnRzLk9yZGVyZWQp",
                                      "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                      "duration": 1774246458,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.28:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Compilation error making assertions on a constraint.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 28,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "As mentioned previously, at compile time, generic function calls are replaced with their concrete types instead. The result is a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function that takes a map of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " to ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "int",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " and returns a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "[]string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-29"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-29"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.29",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-29"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-29",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Keys"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Keys",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/assertions/static",
                                    "sym": "Keys"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func Keys(m map[string]int) []string {\n\n\t// make a slice of the keys\n\tkeys := make([]string, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// if k implements fmt.Stringer,\n\t\t// print the string representation\n\t\tif st, ok := k.(fmt.Stringer); ok {\n\t\t\tfmt.Println(st.String())\n\t\t}\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Keys"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/static",
                                        "stdout": "ZnVuYyBLZXlzKG0gbWFwW3N0cmluZ11pbnQpIFtdc3RyaW5nIHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXXN0cmluZywgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gaWYgayBpbXBsZW1lbnRzIGZtdC5TdHJpbmdlciwKCQkvLyBwcmludCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uCgkJaWYgc3QsIG9rIDo9IGsuKGZtdC5TdHJpbmdlcik7IG9rIHsKCQkJZm10LlByaW50bG4oc3QuU3RyaW5nKCkpCgkJfQoKCQkvLyBhZGQgdGhlIGtleSB0byB0aGUgc2xpY2UKCQlrZXlzID0gYXBwZW5kKGtleXMsIGspCgl9CgoJLy8gcmV0dXJuIHRoZSBrZXlzCglyZXR1cm4ga2V5cwp9",
                                        "duration": 476740583,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func Keys(m map[string]int) []string {\n\n\t// make a slice of the keys\n\tkeys := make([]string, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// if k implements fmt.Stringer,\n\t\t// print the string representation\n\t\tif st, ok := k.(fmt.Stringer); ok {\n\t\t\tfmt.Println(st.String())\n\t\t}\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Keys"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/static",
                                      "stdout": "ZnVuYyBLZXlzKG0gbWFwW3N0cmluZ11pbnQpIFtdc3RyaW5nIHsKCgkvLyBtYWtlIGEgc2xpY2Ugb2YgdGhlIGtleXMKCWtleXMgOj0gbWFrZShbXXN0cmluZywgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gaWYgayBpbXBsZW1lbnRzIGZtdC5TdHJpbmdlciwKCQkvLyBwcmludCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uCgkJaWYgc3QsIG9rIDo9IGsuKGZtdC5TdHJpbmdlcik7IG9rIHsKCQkJZm10LlByaW50bG4oc3QuU3RyaW5nKCkpCgkJfQoKCQkvLyBhZGQgdGhlIGtleSB0byB0aGUgc2xpY2UKCQlrZXlzID0gYXBwZW5kKGtleXMsIGspCgl9CgoJLy8gcmV0dXJuIHRoZSBrZXlzCglyZXR1cm4ga2V5cwp9",
                                      "duration": 476740583,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.29:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The compiled output of a generic function.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 29,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When looking at the compilation error for \"concrete\" representation of the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Keys",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " function the error is a little more clear.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-30",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "exit": "-1",
                                    "src": "src/assertions/static",
                                    "test": "-v"
                                  },
                                  "expected_exit": -1,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys.go:17:16: invalid operation: k (variable of type string) is not an interface",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/static",
                                        "err": {
                                          "Stderr": null
                                        },
                                        "exit": 1,
                                        "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5cy5nbzoxNzoxNjogaW52YWxpZCBvcGVyYXRpb246IGsgKHZhcmlhYmxlIG9mIHR5cGUgc3RyaW5nKSBpcyBub3QgYW4gaW50ZXJmYWNl",
                                        "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                        "duration": 1742717708,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys.go:17:16: invalid operation: k (variable of type string) is not an interface",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/static",
                                      "err": {
                                        "Stderr": null
                                      },
                                      "exit": 1,
                                      "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5cy5nbzoxNzoxNjogaW52YWxpZCBvcGVyYXRpb246IGsgKHZhcmlhYmxlIG9mIHR5cGUgc3RyaW5nKSBpcyBub3QgYW4gaW50ZXJmYWNl",
                                      "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                      "duration": 1742717708,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.30:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Compilation error type asserting on a concrete type.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 30,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In Go type assertions, such as those in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-29"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-29"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.29",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-29"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", against concrete types is not allowed. This is no reason to assert if ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " or ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "User",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " or another types implements the interface, because the compiler already if it can be done.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Mixing Method and Type Constraints",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When defining constraints we have to choose between type based constraints and method based constraints. For example, in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-31"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-31"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.31",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-31"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", we can can't define a constraint that is either ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Ordered",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Ordered",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered"
                                }
                              ],
                              {
                                "text": " or ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "fmt#Stringer",
                                    "href": "https://pkg.go.dev/fmt#Stringer",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "fmt.Stringer",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/fmt#Stringer"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-31",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "MapKey"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short MapKey",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/assertions/mixed",
                                    "sym": "MapKey"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "type MapKey interface {\n\tconstraints.Ordered | fmt.Stringer\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "MapKey"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/mixed",
                                        "stdout": "dHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCWNvbnN0cmFpbnRzLk9yZGVyZWQgfCBmbXQuU3RyaW5nZXIKfQ==",
                                        "duration": 255071541,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "type MapKey interface {\n\tconstraints.Ordered | fmt.Stringer\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "MapKey"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/mixed",
                                      "stdout": "dHlwZSBNYXBLZXkgaW50ZXJmYWNlIHsKCWNvbnN0cmFpbnRzLk9yZGVyZWQgfCBmbXQuU3RyaW5nZXIKfQ==",
                                      "duration": 255071541,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Keys"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Keys",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/assertions/mixed",
                                    "sym": "Keys"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func Keys[K MapKey, V any](m map[K]V) []K {\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Keys"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/mixed",
                                        "stdout": "ZnVuYyBLZXlzW0sgTWFwS2V5LCBWIGFueV0obSBtYXBbS11WKSBbXUsgewoKCS8vIG1ha2UgYSBzbGljZSBvZiB0aGUga2V5cwoJa2V5cyA6PSBtYWtlKFtdSywgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                        "duration": 303404125,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func Keys[K MapKey, V any](m map[K]V) []K {\n\n\t// make a slice of the keys\n\tkeys := make([]K, 0, len(m))\n\n\t// iterate over the map\n\tfor k := range m {\n\n\t\t// add the key to the slice\n\t\tkeys = append(keys, k)\n\t}\n\n\t// return the keys\n\treturn keys\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Keys"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/mixed",
                                      "stdout": "ZnVuYyBLZXlzW0sgTWFwS2V5LCBWIGFueV0obSBtYXBbS11WKSBbXUsgewoKCS8vIG1ha2UgYSBzbGljZSBvZiB0aGUga2V5cwoJa2V5cyA6PSBtYWtlKFtdSywgMCwgbGVuKG0pKQoKCS8vIGl0ZXJhdGUgb3ZlciB0aGUgbWFwCglmb3IgayA6PSByYW5nZSBtIHsKCgkJLy8gYWRkIHRoZSBrZXkgdG8gdGhlIHNsaWNlCgkJa2V5cyA9IGFwcGVuZChrZXlzLCBrKQoJfQoKCS8vIHJldHVybiB0aGUga2V5cwoJcmV0dXJuIGtleXMKfQ==",
                                      "duration": 303404125,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "exit": "-1",
                                    "src": "src/assertions/mixed",
                                    "test": "-v"
                                  },
                                  "expected_exit": -1,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys.go:10:24: cannot use fmt.Stringer in union (fmt.Stringer contains methods)\n./keys.go:13:34: invalid map key type K (missing comparable constraint)",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/mixed",
                                        "err": {
                                          "Stderr": null
                                        },
                                        "exit": 1,
                                        "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5cy5nbzoxMDoyNDogY2Fubm90IHVzZSBmbXQuU3RyaW5nZXIgaW4gdW5pb24gKGZtdC5TdHJpbmdlciBjb250YWlucyBtZXRob2RzKQouL2tleXMuZ286MTM6MzQ6IGludmFsaWQgbWFwIGtleSB0eXBlIEsgKG1pc3NpbmcgY29tcGFyYWJsZSBjb25zdHJhaW50KQ==",
                                        "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                        "duration": 898703125,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\nFAIL\tdemo [build failed]\n\n# demo [demo.test]\n./keys.go:10:24: cannot use fmt.Stringer in union (fmt.Stringer contains methods)\n./keys.go:13:34: invalid map key type K (missing comparable constraint)",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/assertions/mixed",
                                      "err": {
                                        "Stderr": null
                                      },
                                      "exit": 1,
                                      "stderr": "IyBkZW1vIFtkZW1vLnRlc3RdCi4va2V5cy5nbzoxMDoyNDogY2Fubm90IHVzZSBmbXQuU3RyaW5nZXIgaW4gdW5pb24gKGZtdC5TdHJpbmdlciBjb250YWlucyBtZXRob2RzKQouL2tleXMuZ286MTM6MzQ6IGludmFsaWQgbWFwIGtleSB0eXBlIEsgKG1pc3NpbmcgY29tcGFyYWJsZSBjb25zdHJhaW50KQ==",
                                      "stdout": "RkFJTAlkZW1vIFtidWlsZCBmYWlsZWRd",
                                      "duration": 898703125,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.31:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Compilation error mixing method and type constraints.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 31,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h2",
                            "file": "module.md",
                            "level": 2,
                            "nodes": [
                              {
                                "text": "Generic Types",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In addition to functions, types can also be generic. If we consider building a data store we might define a generic type to represent a \"model\". In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-32"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-32"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.32",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-32"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " we define a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Model",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " interface that defines a constraint that all implementations of the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Model",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " interface must satisfy. The ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Model",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " interface has a type constraint, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "[T constraints.Ordered]",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". This constraint is now available for use on the interface's methods.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-32",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Model"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Model",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/store",
                                    "sym": "Model"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "type Model[T constraints.Ordered] interface {\n\tID() T\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Model"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                        "stdout": "dHlwZSBNb2RlbFtUIGNvbnN0cmFpbnRzLk9yZGVyZWRdIGludGVyZmFjZSB7CglJRCgpIFQKfQ==",
                                        "duration": 614406000,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "type Model[T constraints.Ordered] interface {\n\tID() T\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Model"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                      "stdout": "dHlwZSBNb2RlbFtUIGNvbnN0cmFpbnRzLk9yZGVyZWRdIGludGVyZmFjZSB7CglJRCgpIFQKfQ==",
                                      "duration": 614406000,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.32:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Model",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " interface with generics.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 32,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "Now, in order to implement the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Model",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " interface, in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-32"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-32"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.32",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-32"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", a type needs a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "ID()",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " method that returns a type listed in the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "a",
                                  "attributes": {
                                    "for": "golang.org/x/exp/constraints#Ordered",
                                    "href": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered",
                                    "target": "_blank"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "code",
                                      "file": "module.md",
                                      "nodes": [
                                        {
                                          "text": "constraints.Ordered",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.InlineCode"
                                    }
                                  ],
                                  "type": "*hype.Link",
                                  "url": "https://pkg.go.dev/golang.org/x/exp/constraints#Ordered"
                                }
                              ],
                              {
                                "text": " constraint.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-33",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "User"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short User",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/store",
                                    "sym": "User"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "type User struct {\n\tEmail string\n}\n\nfunc (u User) ID() string",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "User"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                        "stdout": "dHlwZSBVc2VyIHN0cnVjdCB7CglFbWFpbCBzdHJpbmcKfQoKZnVuYyAodSBVc2VyKSBJRCgpIHN0cmluZw==",
                                        "duration": 614824625,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "type User struct {\n\tEmail string\n}\n\nfunc (u User) ID() string",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "User"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                      "stdout": "dHlwZSBVc2VyIHN0cnVjdCB7CglFbWFpbCBzdHJpbmcKfQoKZnVuYyAodSBVc2VyKSBJRCgpIHN0cmluZw==",
                                      "duration": 614824625,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.33:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "A ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "User",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " type that implements ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "ref",
                                        "attributes": {
                                          "id": "listing-1-32"
                                        },
                                        "nodes": [
                                          {
                                            "atom": "a",
                                            "attributes": {
                                              "href": "#listing-1-32"
                                            },
                                            "nodes": [
                                              {
                                                "text": "Listing 1.32",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.Link",
                                            "url": "#listing-1-32"
                                          }
                                        ],
                                        "type": "*hype.Ref"
                                      }
                                    ],
                                    {
                                      "text": ".",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 33,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-34"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-34"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.34",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-34"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": " we define a ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Store",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " struct type that has two type constraints, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "[K constraints.Ordered]",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " and ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "[M Model[K]]",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". In this example we are using the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "K",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " constraint defined on the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Store",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type to define the constraint on the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Model",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-34",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Store"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Store",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/store",
                                    "sym": "Store"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "// Store is a map of models where the map key is any\n// comparable type and the map value is any type that\n// implements the Model constraint.\ntype Store[K constraints.Ordered, M Model[K]] struct {\n\tdata map[K]M\n}\n\nfunc (s Store[K, M]) Find(id K) (M, error)\nfunc (s *Store[K, M]) Insert(m M) error",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Store"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                        "stdout": "Ly8gU3RvcmUgaXMgYSBtYXAgb2YgbW9kZWxzIHdoZXJlIHRoZSBtYXAga2V5IGlzIGFueQovLyBjb21wYXJhYmxlIHR5cGUgYW5kIHRoZSBtYXAgdmFsdWUgaXMgYW55IHR5cGUgdGhhdAovLyBpbXBsZW1lbnRzIHRoZSBNb2RlbCBjb25zdHJhaW50Lgp0eXBlIFN0b3JlW0sgY29uc3RyYWludHMuT3JkZXJlZCwgTSBNb2RlbFtLXV0gc3RydWN0IHsKCWRhdGEgbWFwW0tdTQp9CgpmdW5jIChzIFN0b3JlW0ssIE1dKSBGaW5kKGlkIEspIChNLCBlcnJvcikKZnVuYyAocyAqU3RvcmVbSywgTV0pIEluc2VydChtIE0pIGVycm9y",
                                        "duration": 104121667,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "// Store is a map of models where the map key is any\n// comparable type and the map value is any type that\n// implements the Model constraint.\ntype Store[K constraints.Ordered, M Model[K]] struct {\n\tdata map[K]M\n}\n\nfunc (s Store[K, M]) Find(id K) (M, error)\nfunc (s *Store[K, M]) Insert(m M) error",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Store"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                      "stdout": "Ly8gU3RvcmUgaXMgYSBtYXAgb2YgbW9kZWxzIHdoZXJlIHRoZSBtYXAga2V5IGlzIGFueQovLyBjb21wYXJhYmxlIHR5cGUgYW5kIHRoZSBtYXAgdmFsdWUgaXMgYW55IHR5cGUgdGhhdAovLyBpbXBsZW1lbnRzIHRoZSBNb2RlbCBjb25zdHJhaW50Lgp0eXBlIFN0b3JlW0sgY29uc3RyYWludHMuT3JkZXJlZCwgTSBNb2RlbFtLXV0gc3RydWN0IHsKCWRhdGEgbWFwW0tdTQp9CgpmdW5jIChzIFN0b3JlW0ssIE1dKSBGaW5kKGlkIEspIChNLCBlcnJvcikKZnVuYyAocyAqU3RvcmVbSywgTV0pIEluc2VydChtIE0pIGVycm9y",
                                      "duration": 104121667,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.34:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Store",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " type with generics.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 34,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "When defining methods on types that use generics, the receiver of the method needs to be instantiated with the appropriate concrete type or types. Consider the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Find",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " method on the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Store",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type in ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-35"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-35"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.35",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-35"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ".",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-35",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "doc",
                                    "-cmd",
                                    "-u",
                                    "-src",
                                    "-short",
                                    "Store.Find"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "exec": "go doc -cmd -u -src -short Store.Find",
                                    "hide-cmd": "",
                                    "language": "go",
                                    "src": "src/store",
                                    "sym": "Store.Find"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-go",
                                                "language": "go"
                                              },
                                              "lang": "go",
                                              "nodes": [
                                                {
                                                  "text": "func (s Store[K, M]) Find(id K) (M, error) {\n\tm, ok := s.data[id]\n\tif !ok {\n\t\treturn m, fmt.Errorf(\u0026#34;key not found %v\u0026#34;, id)\n\t}\n\n\treturn m, nil\n}",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "doc",
                                          "-cmd",
                                          "-u",
                                          "-src",
                                          "-short",
                                          "Store.Find"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                        "stdout": "ZnVuYyAocyBTdG9yZVtLLCBNXSkgRmluZChpZCBLKSAoTSwgZXJyb3IpIHsKCW0sIG9rIDo9IHMuZGF0YVtpZF0KCWlmICFvayB7CgkJcmV0dXJuIG0sIGZtdC5FcnJvcmYoImtleSBub3QgZm91bmQgJXYiLCBpZCkKCX0KCglyZXR1cm4gbSwgbmlsCn0=",
                                        "duration": 410640292,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-go",
                                              "language": "go"
                                            },
                                            "lang": "go",
                                            "nodes": [
                                              {
                                                "text": "func (s Store[K, M]) Find(id K) (M, error) {\n\tm, ok := s.data[id]\n\tif !ok {\n\t\treturn m, fmt.Errorf(\u0026#34;key not found %v\u0026#34;, id)\n\t}\n\n\treturn m, nil\n}",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "doc",
                                        "-cmd",
                                        "-u",
                                        "-src",
                                        "-short",
                                        "Store.Find"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                      "stdout": "ZnVuYyAocyBTdG9yZVtLLCBNXSkgRmluZChpZCBLKSAoTSwgZXJyb3IpIHsKCW0sIG9rIDo9IHMuZGF0YVtpZF0KCWlmICFvayB7CgkJcmV0dXJuIG0sIGZtdC5FcnJvcmYoImtleSBub3QgZm91bmQgJXYiLCBpZCkKCX0KCglyZXR1cm4gbSwgbmlsCn0=",
                                      "duration": 410640292,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.35:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "The ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Find",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " method on the ",
                                      "type": "hype.Text"
                                    },
                                    [
                                      {
                                        "atom": "code",
                                        "nodes": [
                                          {
                                            "text": "Store",
                                            "type": "hype.Text"
                                          }
                                        ],
                                        "type": "*hype.InlineCode"
                                      }
                                    ],
                                    {
                                      "text": " type.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 35,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "The receiver, ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "(s Store[K, M])",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ", is instantiated with the concrete types that the ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Store",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type was instantiated with. Those types can also be used to define arguments and return values for these methods. In ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "ref",
                                  "attributes": {
                                    "id": "listing-1-36"
                                  },
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "atom": "a",
                                      "attributes": {
                                        "href": "#listing-1-36"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.36",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Link",
                                      "url": "#listing-1-36"
                                    }
                                  ],
                                  "type": "*hype.Ref"
                                }
                              ],
                              {
                                "text": ", we initialize a new ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "Store",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " type with the constraints of ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "string",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": " and ",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "code",
                                  "file": "module.md",
                                  "nodes": [
                                    {
                                      "text": "User",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.InlineCode"
                                }
                              ],
                              {
                                "text": ". In the tests we are able to work with the original concrete types, instead of interfaces backed by unknown types.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "figure",
                            "attributes": {
                              "id": "listing-1-36",
                              "type": "listing"
                            },
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "pre",
                                "nodes": [
                                  [
                                    {
                                      "atom": "code",
                                      "attributes": {
                                        "class": "language-go",
                                        "language": "go",
                                        "src": "src/store/store_test.go#example"
                                      },
                                      "lang": "go",
                                      "nodes": [
                                        {
                                          "content": "func Test_Store_Insert(t *testing.T) {\n\tt.Parallel()\n\n\t// create a store\n\ts := \u0026Store[string, User]{\n\t\tdata: map[string]User{},\n\t}\n\n\t// create a user\n\texp := User{Email: \"kurt@exampl.com\"}\n\n\t// insert the user\n\terr := s.Insert(exp)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// retreive the user\n\tact, err := s.Find(exp.Email)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// assert the returned user is the same as the inserted user\n\tif exp.Email != act.Email {\n\t\tt.Fatalf(\"expected %v, got %v\", exp, act)\n\t}\n\n}",
                                          "file": "src/store/store_test.go",
                                          "lang": "go",
                                          "name": "example",
                                          "start": 7,
                                          "end": 38,
                                          "type": "hype.Snippet"
                                        }
                                      ],
                                      "type": "*hype.SourceCode"
                                    }
                                  ]
                                ],
                                "type": "*hype.Element"
                              },
                              {
                                "atom": "hr",
                                "type": "*hype.Element"
                              },
                              [
                                {
                                  "args": [
                                    "go",
                                    "test",
                                    "-v"
                                  ],
                                  "atom": "cmd",
                                  "attributes": {
                                    "data-go-version": "go1.21.5",
                                    "exec": "go test -v",
                                    "src": "src/store",
                                    "test": "-v"
                                  },
                                  "expected_exit": 0,
                                  "nodes": [
                                    {
                                      "atom": "result",
                                      "nodes": [
                                        {
                                          "atom": "pre",
                                          "nodes": [
                                            {
                                              "atom": "code",
                                              "attributes": {
                                                "class": "language-shell",
                                                "language": "shell"
                                              },
                                              "lang": "shell",
                                              "nodes": [
                                                {
                                                  "text": "$ go test -v\n\n=== RUN   Test_Store_Insert\n=== PAUSE Test_Store_Insert\n=== CONT  Test_Store_Insert\n--- PASS: Test_Store_Insert (0.00s)\nPASS\nok  \tdemo\t0.382s",
                                                  "type": "hype.Text"
                                                },
                                                {
                                                  "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                  "type": "hype.Text"
                                                }
                                              ],
                                              "type": "*hype.FencedCode"
                                            }
                                          ],
                                          "type": "*hype.Element"
                                        }
                                      ],
                                      "result": {
                                        "args": [
                                          "go",
                                          "test",
                                          "-v"
                                        ],
                                        "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                        "stdout": "PT09IFJVTiAgIFRlc3RfU3RvcmVfSW5zZXJ0Cj09PSBQQVVTRSBUZXN0X1N0b3JlX0luc2VydAo9PT0gQ09OVCAgVGVzdF9TdG9yZV9JbnNlcnQKLS0tIFBBU1M6IFRlc3RfU3RvcmVfSW5zZXJ0ICgwLjAwcykKUEFTUwpvayAgCWRlbW8JMC4zODJz",
                                        "duration": 1583265208,
                                        "type": "*clam.Result"
                                      },
                                      "type": "*hype.CmdResult"
                                    }
                                  ],
                                  "result": {
                                    "atom": "result",
                                    "nodes": [
                                      {
                                        "atom": "pre",
                                        "nodes": [
                                          {
                                            "atom": "code",
                                            "attributes": {
                                              "class": "language-shell",
                                              "language": "shell"
                                            },
                                            "lang": "shell",
                                            "nodes": [
                                              {
                                                "text": "$ go test -v\n\n=== RUN   Test_Store_Insert\n=== PAUSE Test_Store_Insert\n=== CONT  Test_Store_Insert\n--- PASS: Test_Store_Insert (0.00s)\nPASS\nok  \tdemo\t0.382s",
                                                "type": "hype.Text"
                                              },
                                              {
                                                "text": "\n\n--------------------------------------------------------------------------------\nGo Version: go1.21.5\n",
                                                "type": "hype.Text"
                                              }
                                            ],
                                            "type": "*hype.FencedCode"
                                          }
                                        ],
                                        "type": "*hype.Element"
                                      }
                                    ],
                                    "result": {
                                      "args": [
                                        "go",
                                        "test",
                                        "-v"
                                      ],
                                      "dir": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics/src/store",
                                      "stdout": "PT09IFJVTiAgIFRlc3RfU3RvcmVfSW5zZXJ0Cj09PSBQQVVTRSBUZXN0X1N0b3JlX0luc2VydAo9PT0gQ09OVCAgVGVzdF9TdG9yZV9JbnNlcnQKLS0tIFBBU1M6IFRlc3RfU3RvcmVfSW5zZXJ0ICgwLjAwcykKUEFTUwpvayAgCWRlbW8JMC4zODJz",
                                      "duration": 1583265208,
                                      "type": "*clam.Result"
                                    },
                                    "type": "*hype.CmdResult"
                                  },
                                  "timeout": "30s",
                                  "type": "*hype.Cmd"
                                }
                              ],
                              {
                                "text": "\n\n",
                                "type": "hype.Text"
                              },
                              [
                                {
                                  "atom": "figcaption",
                                  "nodes": [
                                    {
                                      "atom": "em",
                                      "attributes": {
                                        "class": "figure-name"
                                      },
                                      "nodes": [
                                        {
                                          "text": "Listing 1.36:",
                                          "type": "hype.Text"
                                        }
                                      ],
                                      "type": "*hype.Element"
                                    },
                                    {
                                      "text": " ",
                                      "type": "hype.Text"
                                    },
                                    {
                                      "text": "Testing the a type with constraints.",
                                      "type": "hype.Text"
                                    }
                                  ],
                                  "type": "*hype.Figcaption"
                                }
                              ],
                              {
                                "text": "\n",
                                "type": "hype.Text"
                              }
                            ],
                            "pos": 36,
                            "section_id": 1,
                            "style": "listing",
                            "type": "*hype.Figure"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "title": "Generics",
                      "type": "*hype.Page"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  },
                  [
                    {
                      "atom": "page",
                      "file": "module.md",
                      "nodes": [
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "h1",
                            "file": "module.md",
                            "level": 1,
                            "nodes": [
                              {
                                "text": "Summary",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "hype.Heading"
                          }
                        ],
                        {
                          "text": "\n\n",
                          "type": "hype.Text"
                        },
                        [
                          {
                            "atom": "p",
                            "file": "module.md",
                            "nodes": [
                              {
                                "text": "In this ",
                                "type": "hype.Text"
                              },
                              {
                                "atom": "binding",
                                "attributes": {
                                  "part": ""
                                },
                                "file": "module.md",
                                "type": "*hype.Element"
                              },
                              {
                                "text": " we covered the basics of generics in Go. We learned how to define constraints, how to use constraints on types, and how to use constraints on methods. Generics is still new to Go, but it is a powerful tool that can be used to make your code more expressive and maintainable.",
                                "type": "hype.Text"
                              }
                            ],
                            "type": "*hype.Paragraph"
                          }
                        ],
                        {
                          "text": "\n",
                          "type": "hype.Text"
                        }
                      ],
                      "title": "Summary",
                      "type": "*hype.Page"
                    }
                  ],
                  {
                    "text": "\n",
                    "type": "hype.Text"
                  }
                ],
                "type": "*hype.Body"
              }
            ]
          ],
          "type": "*hype.Element"
        }
      ],
      "type": "*hype.Element"
    }
  ],
  "parser": {
    "type": "*hype.Parser",
    "root": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics",
    "section": 1,
    "snippets": {}
  },
  "root": "/Users/markbates/Library/CloudStorage/Dropbox/dev/guides/content/book/chapters/10-generics",
  "section_id": 1,
  "snippets": {},
  "title": "Generics",
  "type": "*hype.Document",
  "filename": "module.md"
}